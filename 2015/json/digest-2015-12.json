{
    "commits_count": 33,
    "date_started": "2015-12-28",
    "date_updated": "2015-12-28",
    "description": "MovieEye uses django-rest-framework and django to first create an api and then use the api in another app to display movie information. An admin can add,delete movies. Unauthenticated users can read-only",
    "forks_count": 0,
    "html_url": "https://github.com/saket-mishra/MovieEye---IMDB-like-API-integration-with-rest-framework",
    "keywords": [
        "unauthenticated user"
    ],
    "language": "CSS",
    "repo_name": "MovieEye---IMDB-like-API-integration-with-rest-framework",
    "repo_owner": "saket-mishra",
    "repotime": "2015-12-28, 18:02:47",
    "stargazers_count": 0,
    "watchers_count": 0
}
{
    "commits_count": 18,
    "date_started": "2015-03-15",
    "date_updated": "2015-12-14",
    "description": "list of sql-injection and XSS strings",
    "forks_count": 22,
    "html_url": "https://github.com/danTaler/detectionString",
    "keywords": [
        "sql injection"
    ],
    "language": null,
    "repo_name": "detectionString",
    "repo_owner": "danTaler",
    "repotime": "2015-12-14, 16:47:36",
    "stargazers_count": 115,
    "watchers_count": 115
}
{
    "commits_count": 1,
    "date_started": "2015-12-11",
    "date_updated": "2015-12-11",
    "description": "Quick python script to automatically load NTLM hashes from Responder logs and fires up Hashcat to crack them ",
    "forks_count": 25,
    "html_url": "https://github.com/sensepost/autoresponder",
    "keywords": [
        "by_owner"
    ],
    "language": "Python",
    "repo_name": "autoresponder",
    "repo_owner": "sensepost",
    "repotime": "2015-12-11, 13:28:31",
    "stargazers_count": 79,
    "watchers_count": 79
}
{
    "commits_count": 1,
    "date_started": "2015-12-03",
    "date_updated": "2015-12-03",
    "description": "    Data Analysis in Insurance Industry -----------------------------------    -----------------------------------  In this Project, We have analyzed an insurance industry data for car Accidents.To analyze the data follow the steps.  **Prerequisites:**  Microsoft Azure account [Click here for trial account][1]  Cloud Berry for Azure [To download click here][2]   **Steps:**          **1.** After creating an account on     Microsoft's Azure, create     an HDInsight cluster.       - Go to Azure portal after creating an account in Azure.    - Click on New   - In Data+Analytics, Select HDInsight   - A new pop-up will appear, Type the cluster name. Select type as &amp;quot;Hadoop&amp;quot;, Operating  System as&amp;quot;Linux&amp;quot;, Select Total node as 2, Put Login name and password, And click on *create*.   - Azure will start deploying a cluster. It will take few minutes to complete the  process.     **2.**  After Creating the cluster, we  will upload data into the cluster. You can get Insurance's Sam...",
    "forks_count": 1,
    "html_url": "https://github.com/nparab/insurance",
    "keywords": [
        "use after free analysis",
        "Microsoft use after free analysis",
        "Microsoft use after free"
    ],
    "language": null,
    "repo_name": "insurance",
    "repo_owner": "nparab",
    "repotime": "2015-12-03, 01:30:17",
    "stargazers_count": 0,
    "watchers_count": 0
}
{
    "commits_count": 6,
    "date_started": "2015-12-02",
    "date_updated": "2015-12-02",
    "description": "Script to exploit the Kodi local file inclusion vulnerability.",
    "forks_count": 1,
    "html_url": "https://github.com/darkerego/kodi-sploit",
    "keywords": [
        "local file inclusion"
    ],
    "language": "Shell",
    "repo_name": "kodi-sploit",
    "repo_owner": "darkerego",
    "repotime": "2015-12-02, 17:02:53",
    "stargazers_count": 1,
    "watchers_count": 1
}
{
    "commits_count": 33,
    "date_started": "2015-12-28",
    "date_updated": "2015-12-28",
    "description": "MovieEye uses django-rest-framework and django to first create an api and then use the api in another app to display movie information. An admin can add,delete movies. Unauthenticated users can read-only",
    "forks_count": 0,
    "html_url": "https://github.com/saket-mishra/MovieEye---IMDB-like-API-integration-with-rest-framework",
    "keywords": [
        "unauthenticated user"
    ],
    "language": "CSS",
    "repo_name": "MovieEye---IMDB-like-API-integration-with-rest-framework",
    "repo_owner": "saket-mishra",
    "repotime": "2015-12-28, 18:02:47",
    "stargazers_count": 0,
    "watchers_count": 0
}
{
    "commits_count": 18,
    "date_started": "2015-03-15",
    "date_updated": "2015-12-14",
    "description": "list of sql-injection and XSS strings",
    "forks_count": 22,
    "html_url": "https://github.com/danTaler/detectionString",
    "keywords": [
        "sql injection"
    ],
    "language": null,
    "repo_name": "detectionString",
    "repo_owner": "danTaler",
    "repotime": "2015-12-14, 16:47:36",
    "stargazers_count": 115,
    "watchers_count": 115
}
{
    "commits_count": 1,
    "date_started": "2015-12-11",
    "date_updated": "2015-12-11",
    "description": "Quick python script to automatically load NTLM hashes from Responder logs and fires up Hashcat to crack them ",
    "forks_count": 25,
    "html_url": "https://github.com/sensepost/autoresponder",
    "keywords": [
        "by_owner"
    ],
    "language": "Python",
    "repo_name": "autoresponder",
    "repo_owner": "sensepost",
    "repotime": "2015-12-11, 13:28:31",
    "stargazers_count": 79,
    "watchers_count": 79
}
{
    "commits_count": 1,
    "date_started": "2015-12-03",
    "date_updated": "2015-12-03",
    "description": "    Data Analysis in Insurance Industry -----------------------------------    -----------------------------------  In this Project, We have analyzed an insurance industry data for car Accidents.To analyze the data follow the steps.  **Prerequisites:**  Microsoft Azure account [Click here for trial account][1]  Cloud Berry for Azure [To download click here][2]   **Steps:**          **1.** After creating an account on     Microsoft's Azure, create     an HDInsight cluster.       - Go to Azure portal after creating an account in Azure.    - Click on New   - In Data+Analytics, Select HDInsight   - A new pop-up will appear, Type the cluster name. Select type as &amp;quot;Hadoop&amp;quot;, Operating  System as&amp;quot;Linux&amp;quot;, Select Total node as 2, Put Login name and password, And click on *create*.   - Azure will start deploying a cluster. It will take few minutes to complete the  process.     **2.**  After Creating the cluster, we  will upload data into the cluster. You can get Insurance's Sam...",
    "forks_count": 1,
    "html_url": "https://github.com/nparab/insurance",
    "keywords": [
        "use after free analysis",
        "Microsoft use after free analysis",
        "Microsoft use after free"
    ],
    "language": null,
    "repo_name": "insurance",
    "repo_owner": "nparab",
    "repotime": "2015-12-03, 01:30:17",
    "stargazers_count": 0,
    "watchers_count": 0
}
{
    "commits_count": 6,
    "date_started": "2015-12-02",
    "date_updated": "2015-12-02",
    "description": "Script to exploit the Kodi local file inclusion vulnerability.",
    "forks_count": 1,
    "html_url": "https://github.com/darkerego/kodi-sploit",
    "keywords": [
        "local file inclusion"
    ],
    "language": "Shell",
    "repo_name": "kodi-sploit",
    "repo_owner": "darkerego",
    "repotime": "2015-12-02, 17:02:53",
    "stargazers_count": 1,
    "watchers_count": 1
}
{
    "commits_count": 33,
    "date_started": "2015-12-28",
    "date_updated": "2015-12-28",
    "description": "MovieEye uses django-rest-framework and django to first create an api and then use the api in another app to display movie information. An admin can add,delete movies. Unauthenticated users can read-only",
    "forks_count": 0,
    "html_url": "https://github.com/saket-mishra/MovieEye---IMDB-like-API-integration-with-rest-framework",
    "keywords": [
        "unauthenticated user"
    ],
    "language": "CSS",
    "repo_name": "MovieEye---IMDB-like-API-integration-with-rest-framework",
    "repo_owner": "saket-mishra",
    "repotime": "2015-12-28, 18:02:47",
    "stargazers_count": 0,
    "watchers_count": 0
}
{
    "commits_count": 18,
    "date_started": "2015-03-15",
    "date_updated": "2015-12-14",
    "description": "list of sql-injection and XSS strings",
    "forks_count": 22,
    "html_url": "https://github.com/danTaler/detectionString",
    "keywords": [
        "sql injection"
    ],
    "language": null,
    "repo_name": "detectionString",
    "repo_owner": "danTaler",
    "repotime": "2015-12-14, 16:47:36",
    "stargazers_count": 115,
    "watchers_count": 115
}
{
    "commits_count": 1,
    "date_started": "2015-12-11",
    "date_updated": "2015-12-11",
    "description": "Quick python script to automatically load NTLM hashes from Responder logs and fires up Hashcat to crack them ",
    "forks_count": 25,
    "html_url": "https://github.com/sensepost/autoresponder",
    "keywords": [
        "by_owner"
    ],
    "language": "Python",
    "repo_name": "autoresponder",
    "repo_owner": "sensepost",
    "repotime": "2015-12-11, 13:28:31",
    "stargazers_count": 79,
    "watchers_count": 79
}
{
    "commits_count": 1,
    "date_started": "2015-12-03",
    "date_updated": "2015-12-03",
    "description": "    Data Analysis in Insurance Industry -----------------------------------    -----------------------------------  In this Project, We have analyzed an insurance industry data for car Accidents.To analyze the data follow the steps.  **Prerequisites:**  Microsoft Azure account [Click here for trial account][1]  Cloud Berry for Azure [To download click here][2]   **Steps:**          **1.** After creating an account on     Microsoft's Azure, create     an HDInsight cluster.       - Go to Azure portal after creating an account in Azure.    - Click on New   - In Data+Analytics, Select HDInsight   - A new pop-up will appear, Type the cluster name. Select type as &amp;quot;Hadoop&amp;quot;, Operating  System as&amp;quot;Linux&amp;quot;, Select Total node as 2, Put Login name and password, And click on *create*.   - Azure will start deploying a cluster. It will take few minutes to complete the  process.     **2.**  After Creating the cluster, we  will upload data into the cluster. You can get Insurance's Sam...",
    "forks_count": 1,
    "html_url": "https://github.com/nparab/insurance",
    "keywords": [
        "use after free analysis",
        "Microsoft use after free analysis",
        "Microsoft use after free"
    ],
    "language": null,
    "repo_name": "insurance",
    "repo_owner": "nparab",
    "repotime": "2015-12-03, 01:30:17",
    "stargazers_count": 0,
    "watchers_count": 0
}
{
    "commits_count": 6,
    "date_started": "2015-12-02",
    "date_updated": "2015-12-02",
    "description": "Script to exploit the Kodi local file inclusion vulnerability.",
    "forks_count": 1,
    "html_url": "https://github.com/darkerego/kodi-sploit",
    "keywords": [
        "local file inclusion"
    ],
    "language": "Shell",
    "repo_name": "kodi-sploit",
    "repo_owner": "darkerego",
    "repotime": "2015-12-02, 17:02:53",
    "stargazers_count": 1,
    "watchers_count": 1
}
{
    "commits_count": 33,
    "date_started": "2015-12-28",
    "date_updated": "2015-12-28",
    "description": "MovieEye uses django-rest-framework and django to first create an api and then use the api in another app to display movie information. An admin can add,delete movies. Unauthenticated users can read-only",
    "forks_count": 0,
    "html_url": "https://github.com/saket-mishra/MovieEye---IMDB-like-API-integration-with-rest-framework",
    "keywords": [
        "unauthenticated user"
    ],
    "language": "CSS",
    "repo_name": "MovieEye---IMDB-like-API-integration-with-rest-framework",
    "repo_owner": "saket-mishra",
    "repotime": "2015-12-28, 18:02:47",
    "stargazers_count": 0,
    "watchers_count": 0
}
{
    "commits_count": 18,
    "date_started": "2015-03-15",
    "date_updated": "2015-12-14",
    "description": "list of sql-injection and XSS strings",
    "forks_count": 22,
    "html_url": "https://github.com/danTaler/detectionString",
    "keywords": [
        "sql injection"
    ],
    "language": null,
    "repo_name": "detectionString",
    "repo_owner": "danTaler",
    "repotime": "2015-12-14, 16:47:36",
    "stargazers_count": 115,
    "watchers_count": 115
}
{
    "commits_count": 1,
    "date_started": "2015-12-11",
    "date_updated": "2015-12-11",
    "description": "Quick python script to automatically load NTLM hashes from Responder logs and fires up Hashcat to crack them ",
    "forks_count": 25,
    "html_url": "https://github.com/sensepost/autoresponder",
    "keywords": [
        "by_owner"
    ],
    "language": "Python",
    "repo_name": "autoresponder",
    "repo_owner": "sensepost",
    "repotime": "2015-12-11, 13:28:31",
    "stargazers_count": 79,
    "watchers_count": 79
}
{
    "commits_count": 1,
    "date_started": "2015-12-03",
    "date_updated": "2015-12-03",
    "description": "    Data Analysis in Insurance Industry -----------------------------------    -----------------------------------  In this Project, We have analyzed an insurance industry data for car Accidents.To analyze the data follow the steps.  **Prerequisites:**  Microsoft Azure account [Click here for trial account][1]  Cloud Berry for Azure [To download click here][2]   **Steps:**          **1.** After creating an account on     Microsoft's Azure, create     an HDInsight cluster.       - Go to Azure portal after creating an account in Azure.    - Click on New   - In Data+Analytics, Select HDInsight   - A new pop-up will appear, Type the cluster name. Select type as &amp;quot;Hadoop&amp;quot;, Operating  System as&amp;quot;Linux&amp;quot;, Select Total node as 2, Put Login name and password, And click on *create*.   - Azure will start deploying a cluster. It will take few minutes to complete the  process.     **2.**  After Creating the cluster, we  will upload data into the cluster. You can get Insurance's Sam...",
    "forks_count": 1,
    "html_url": "https://github.com/nparab/insurance",
    "keywords": [
        "use after free analysis",
        "Microsoft use after free analysis",
        "Microsoft use after free"
    ],
    "language": null,
    "repo_name": "insurance",
    "repo_owner": "nparab",
    "repotime": "2015-12-03, 01:30:17",
    "stargazers_count": 0,
    "watchers_count": 0
}
{
    "commits_count": 6,
    "date_started": "2015-12-02",
    "date_updated": "2015-12-02",
    "description": "Script to exploit the Kodi local file inclusion vulnerability.",
    "forks_count": 1,
    "html_url": "https://github.com/darkerego/kodi-sploit",
    "keywords": [
        "local file inclusion"
    ],
    "language": "Shell",
    "repo_name": "kodi-sploit",
    "repo_owner": "darkerego",
    "repotime": "2015-12-02, 17:02:53",
    "stargazers_count": 1,
    "watchers_count": 1
}
{
    "commits_count": 33,
    "date_started": "2015-12-28",
    "date_updated": "2015-12-28",
    "description": "MovieEye uses django-rest-framework and django to first create an api and then use the api in another app to display movie information. An admin can add,delete movies. Unauthenticated users can read-only",
    "forks_count": 0,
    "html_url": "https://github.com/saket-mishra/MovieEye---IMDB-like-API-integration-with-rest-framework",
    "keywords": [
        "unauthenticated user"
    ],
    "language": "CSS",
    "repo_name": "MovieEye---IMDB-like-API-integration-with-rest-framework",
    "repo_owner": "saket-mishra",
    "repotime": "2015-12-28, 18:02:47",
    "stargazers_count": 0,
    "watchers_count": 0
}
{
    "commits_count": 18,
    "date_started": "2015-03-15",
    "date_updated": "2015-12-14",
    "description": "list of sql-injection and XSS strings",
    "forks_count": 22,
    "html_url": "https://github.com/danTaler/detectionString",
    "keywords": [
        "sql injection"
    ],
    "language": null,
    "repo_name": "detectionString",
    "repo_owner": "danTaler",
    "repotime": "2015-12-14, 16:47:36",
    "stargazers_count": 115,
    "watchers_count": 115
}
{
    "commits_count": 1,
    "date_started": "2015-12-11",
    "date_updated": "2015-12-11",
    "description": "Quick python script to automatically load NTLM hashes from Responder logs and fires up Hashcat to crack them ",
    "forks_count": 25,
    "html_url": "https://github.com/sensepost/autoresponder",
    "keywords": [
        "by_owner"
    ],
    "language": "Python",
    "repo_name": "autoresponder",
    "repo_owner": "sensepost",
    "repotime": "2015-12-11, 13:28:31",
    "stargazers_count": 79,
    "watchers_count": 79
}
{
    "commits_count": 1,
    "date_started": "2015-12-03",
    "date_updated": "2015-12-03",
    "description": "    Data Analysis in Insurance Industry -----------------------------------    -----------------------------------  In this Project, We have analyzed an insurance industry data for car Accidents.To analyze the data follow the steps.  **Prerequisites:**  Microsoft Azure account [Click here for trial account][1]  Cloud Berry for Azure [To download click here][2]   **Steps:**          **1.** After creating an account on     Microsoft's Azure, create     an HDInsight cluster.       - Go to Azure portal after creating an account in Azure.    - Click on New   - In Data+Analytics, Select HDInsight   - A new pop-up will appear, Type the cluster name. Select type as &amp;quot;Hadoop&amp;quot;, Operating  System as&amp;quot;Linux&amp;quot;, Select Total node as 2, Put Login name and password, And click on *create*.   - Azure will start deploying a cluster. It will take few minutes to complete the  process.     **2.**  After Creating the cluster, we  will upload data into the cluster. You can get Insurance's Sam...",
    "forks_count": 1,
    "html_url": "https://github.com/nparab/insurance",
    "keywords": [
        "use after free analysis",
        "Microsoft use after free analysis",
        "Microsoft use after free"
    ],
    "language": null,
    "repo_name": "insurance",
    "repo_owner": "nparab",
    "repotime": "2015-12-03, 01:30:17",
    "stargazers_count": 0,
    "watchers_count": 0
}
{
    "commits_count": 6,
    "date_started": "2015-12-02",
    "date_updated": "2015-12-02",
    "description": "Script to exploit the Kodi local file inclusion vulnerability.",
    "forks_count": 1,
    "html_url": "https://github.com/darkerego/kodi-sploit",
    "keywords": [
        "local file inclusion"
    ],
    "language": "Shell",
    "repo_name": "kodi-sploit",
    "repo_owner": "darkerego",
    "repotime": "2015-12-02, 17:02:53",
    "stargazers_count": 1,
    "watchers_count": 1
}
{
    "commits_count": 33,
    "date_started": "2015-12-28",
    "date_updated": "2015-12-28",
    "description": "MovieEye uses django-rest-framework and django to first create an api and then use the api in another app to display movie information. An admin can add,delete movies. Unauthenticated users can read-only",
    "forks_count": 0,
    "html_url": "https://github.com/saket-mishra/MovieEye---IMDB-like-API-integration-with-rest-framework",
    "keywords": [
        "unauthenticated user"
    ],
    "language": "CSS",
    "repo_name": "MovieEye---IMDB-like-API-integration-with-rest-framework",
    "repo_owner": "saket-mishra",
    "repotime": "2015-12-28, 18:02:47",
    "stargazers_count": 0,
    "watchers_count": 0
}
{
    "commits_count": 18,
    "date_started": "2015-03-15",
    "date_updated": "2015-12-14",
    "description": "list of sql-injection and XSS strings",
    "forks_count": 22,
    "html_url": "https://github.com/danTaler/detectionString",
    "keywords": [
        "sql injection"
    ],
    "language": null,
    "repo_name": "detectionString",
    "repo_owner": "danTaler",
    "repotime": "2015-12-14, 16:47:36",
    "stargazers_count": 115,
    "watchers_count": 115
}
{
    "commits_count": 1,
    "date_started": "2015-12-11",
    "date_updated": "2015-12-11",
    "description": "Quick python script to automatically load NTLM hashes from Responder logs and fires up Hashcat to crack them ",
    "forks_count": 25,
    "html_url": "https://github.com/sensepost/autoresponder",
    "keywords": [
        "by_owner"
    ],
    "language": "Python",
    "repo_name": "autoresponder",
    "repo_owner": "sensepost",
    "repotime": "2015-12-11, 13:28:31",
    "stargazers_count": 79,
    "watchers_count": 79
}
{
    "commits_count": 1,
    "date_started": "2015-12-03",
    "date_updated": "2015-12-03",
    "description": "    Data Analysis in Insurance Industry -----------------------------------    -----------------------------------  In this Project, We have analyzed an insurance industry data for car Accidents.To analyze the data follow the steps.  **Prerequisites:**  Microsoft Azure account [Click here for trial account][1]  Cloud Berry for Azure [To download click here][2]   **Steps:**          **1.** After creating an account on     Microsoft's Azure, create     an HDInsight cluster.       - Go to Azure portal after creating an account in Azure.    - Click on New   - In Data+Analytics, Select HDInsight   - A new pop-up will appear, Type the cluster name. Select type as &amp;quot;Hadoop&amp;quot;, Operating  System as&amp;quot;Linux&amp;quot;, Select Total node as 2, Put Login name and password, And click on *create*.   - Azure will start deploying a cluster. It will take few minutes to complete the  process.     **2.**  After Creating the cluster, we  will upload data into the cluster. You can get Insurance's Sam...",
    "forks_count": 1,
    "html_url": "https://github.com/nparab/insurance",
    "keywords": [
        "use after free analysis",
        "Microsoft use after free analysis",
        "Microsoft use after free"
    ],
    "language": null,
    "repo_name": "insurance",
    "repo_owner": "nparab",
    "repotime": "2015-12-03, 01:30:17",
    "stargazers_count": 0,
    "watchers_count": 0
}
{
    "commits_count": 6,
    "date_started": "2015-12-02",
    "date_updated": "2015-12-02",
    "description": "Script to exploit the Kodi local file inclusion vulnerability.",
    "forks_count": 1,
    "html_url": "https://github.com/darkerego/kodi-sploit",
    "keywords": [
        "local file inclusion"
    ],
    "language": "Shell",
    "repo_name": "kodi-sploit",
    "repo_owner": "darkerego",
    "repotime": "2015-12-02, 17:02:53",
    "stargazers_count": 1,
    "watchers_count": 1
}
{
    "commits_count": 33,
    "date_started": "2015-12-28",
    "date_updated": "2015-12-28",
    "description": "MovieEye uses django-rest-framework and django to first create an api and then use the api in another app to display movie information. An admin can add,delete movies. Unauthenticated users can read-only",
    "forks_count": 0,
    "html_url": "https://github.com/saket-mishra/MovieEye---IMDB-like-API-integration-with-rest-framework",
    "keywords": [
        "unauthenticated user"
    ],
    "language": "CSS",
    "repo_name": "MovieEye---IMDB-like-API-integration-with-rest-framework",
    "repo_owner": "saket-mishra",
    "repotime": "2015-12-28, 18:02:47",
    "stargazers_count": 0,
    "watchers_count": 0
}
{
    "commits_count": 18,
    "date_started": "2015-03-15",
    "date_updated": "2015-12-14",
    "description": "list of sql-injection and XSS strings",
    "forks_count": 22,
    "html_url": "https://github.com/danTaler/detectionString",
    "keywords": [
        "sql injection"
    ],
    "language": null,
    "repo_name": "detectionString",
    "repo_owner": "danTaler",
    "repotime": "2015-12-14, 16:47:36",
    "stargazers_count": 115,
    "watchers_count": 115
}
{
    "commits_count": 1,
    "date_started": "2015-12-11",
    "date_updated": "2015-12-11",
    "description": "Quick python script to automatically load NTLM hashes from Responder logs and fires up Hashcat to crack them ",
    "forks_count": 25,
    "html_url": "https://github.com/sensepost/autoresponder",
    "keywords": [
        "by_owner"
    ],
    "language": "Python",
    "repo_name": "autoresponder",
    "repo_owner": "sensepost",
    "repotime": "2015-12-11, 13:28:31",
    "stargazers_count": 79,
    "watchers_count": 79
}
{
    "commits_count": 1,
    "date_started": "2015-12-03",
    "date_updated": "2015-12-03",
    "description": "    Data Analysis in Insurance Industry -----------------------------------    -----------------------------------  In this Project, We have analyzed an insurance industry data for car Accidents.To analyze the data follow the steps.  **Prerequisites:**  Microsoft Azure account [Click here for trial account][1]  Cloud Berry for Azure [To download click here][2]   **Steps:**          **1.** After creating an account on     Microsoft's Azure, create     an HDInsight cluster.       - Go to Azure portal after creating an account in Azure.    - Click on New   - In Data+Analytics, Select HDInsight   - A new pop-up will appear, Type the cluster name. Select type as &amp;quot;Hadoop&amp;quot;, Operating  System as&amp;quot;Linux&amp;quot;, Select Total node as 2, Put Login name and password, And click on *create*.   - Azure will start deploying a cluster. It will take few minutes to complete the  process.     **2.**  After Creating the cluster, we  will upload data into the cluster. You can get Insurance's Sam...",
    "forks_count": 1,
    "html_url": "https://github.com/nparab/insurance",
    "keywords": [
        "use after free analysis",
        "Microsoft use after free analysis",
        "Microsoft use after free"
    ],
    "language": null,
    "repo_name": "insurance",
    "repo_owner": "nparab",
    "repotime": "2015-12-03, 01:30:17",
    "stargazers_count": 0,
    "watchers_count": 0
}
{
    "commits_count": 6,
    "date_started": "2015-12-02",
    "date_updated": "2015-12-02",
    "description": "Script to exploit the Kodi local file inclusion vulnerability.",
    "forks_count": 1,
    "html_url": "https://github.com/darkerego/kodi-sploit",
    "keywords": [
        "local file inclusion"
    ],
    "language": "Shell",
    "repo_name": "kodi-sploit",
    "repo_owner": "darkerego",
    "repotime": "2015-12-02, 17:02:53",
    "stargazers_count": 1,
    "watchers_count": 1
}
{
    "commits_count": 33,
    "date_started": "2015-12-28",
    "date_updated": "2015-12-28",
    "description": "MovieEye uses django-rest-framework and django to first create an api and then use the api in another app to display movie information. An admin can add,delete movies. Unauthenticated users can read-only",
    "forks_count": 0,
    "html_url": "https://github.com/saket-mishra/MovieEye---IMDB-like-API-integration-with-rest-framework",
    "keywords": [
        "unauthenticated user"
    ],
    "language": "CSS",
    "repo_name": "MovieEye---IMDB-like-API-integration-with-rest-framework",
    "repo_owner": "saket-mishra",
    "repotime": "2015-12-28, 18:02:47",
    "stargazers_count": 0,
    "watchers_count": 0
}
{
    "commits_count": 18,
    "date_started": "2015-03-15",
    "date_updated": "2015-12-14",
    "description": "list of sql-injection and XSS strings",
    "forks_count": 22,
    "html_url": "https://github.com/danTaler/detectionString",
    "keywords": [
        "sql injection"
    ],
    "language": null,
    "repo_name": "detectionString",
    "repo_owner": "danTaler",
    "repotime": "2015-12-14, 16:47:36",
    "stargazers_count": 115,
    "watchers_count": 115
}
{
    "commits_count": 1,
    "date_started": "2015-12-11",
    "date_updated": "2015-12-11",
    "description": "Quick python script to automatically load NTLM hashes from Responder logs and fires up Hashcat to crack them ",
    "forks_count": 25,
    "html_url": "https://github.com/sensepost/autoresponder",
    "keywords": [
        "by_owner"
    ],
    "language": "Python",
    "repo_name": "autoresponder",
    "repo_owner": "sensepost",
    "repotime": "2015-12-11, 13:28:31",
    "stargazers_count": 79,
    "watchers_count": 79
}
{
    "commits_count": 1,
    "date_started": "2015-12-03",
    "date_updated": "2015-12-03",
    "description": "    Data Analysis in Insurance Industry -----------------------------------    -----------------------------------  In this Project, We have analyzed an insurance industry data for car Accidents.To analyze the data follow the steps.  **Prerequisites:**  Microsoft Azure account [Click here for trial account][1]  Cloud Berry for Azure [To download click here][2]   **Steps:**          **1.** After creating an account on     Microsoft's Azure, create     an HDInsight cluster.       - Go to Azure portal after creating an account in Azure.    - Click on New   - In Data+Analytics, Select HDInsight   - A new pop-up will appear, Type the cluster name. Select type as &amp;quot;Hadoop&amp;quot;, Operating  System as&amp;quot;Linux&amp;quot;, Select Total node as 2, Put Login name and password, And click on *create*.   - Azure will start deploying a cluster. It will take few minutes to complete the  process.     **2.**  After Creating the cluster, we  will upload data into the cluster. You can get Insurance's Sam...",
    "forks_count": 1,
    "html_url": "https://github.com/nparab/insurance",
    "keywords": [
        "use after free analysis",
        "Microsoft use after free analysis",
        "Microsoft use after free"
    ],
    "language": null,
    "repo_name": "insurance",
    "repo_owner": "nparab",
    "repotime": "2015-12-03, 01:30:17",
    "stargazers_count": 0,
    "watchers_count": 0
}
{
    "commits_count": 6,
    "date_started": "2015-12-02",
    "date_updated": "2015-12-02",
    "description": "Script to exploit the Kodi local file inclusion vulnerability.",
    "forks_count": 1,
    "html_url": "https://github.com/darkerego/kodi-sploit",
    "keywords": [
        "local file inclusion"
    ],
    "language": "Shell",
    "repo_name": "kodi-sploit",
    "repo_owner": "darkerego",
    "repotime": "2015-12-02, 17:02:53",
    "stargazers_count": 1,
    "watchers_count": 1
}
{
    "commits_count": 33,
    "date_started": "2015-12-28",
    "date_updated": "2015-12-28",
    "description": "MovieEye uses django-rest-framework and django to first create an api and then use the api in another app to display movie information. An admin can add,delete movies. Unauthenticated users can read-only",
    "forks_count": 0,
    "html_url": "https://github.com/saket-mishra/MovieEye---IMDB-like-API-integration-with-rest-framework",
    "keywords": [
        "unauthenticated user"
    ],
    "language": "CSS",
    "repo_name": "MovieEye---IMDB-like-API-integration-with-rest-framework",
    "repo_owner": "saket-mishra",
    "repotime": "2015-12-28, 18:02:47",
    "stargazers_count": 0,
    "watchers_count": 0
}
{
    "commits_count": 18,
    "date_started": "2015-03-15",
    "date_updated": "2015-12-14",
    "description": "list of sql-injection and XSS strings",
    "forks_count": 22,
    "html_url": "https://github.com/danTaler/detectionString",
    "keywords": [
        "sql injection"
    ],
    "language": null,
    "repo_name": "detectionString",
    "repo_owner": "danTaler",
    "repotime": "2015-12-14, 16:47:36",
    "stargazers_count": 115,
    "watchers_count": 115
}
{
    "commits_count": 1,
    "date_started": "2015-12-11",
    "date_updated": "2015-12-11",
    "description": "Quick python script to automatically load NTLM hashes from Responder logs and fires up Hashcat to crack them ",
    "forks_count": 25,
    "html_url": "https://github.com/sensepost/autoresponder",
    "keywords": [
        "by_owner"
    ],
    "language": "Python",
    "repo_name": "autoresponder",
    "repo_owner": "sensepost",
    "repotime": "2015-12-11, 13:28:31",
    "stargazers_count": 79,
    "watchers_count": 79
}
{
    "commits_count": 1,
    "date_started": "2015-12-03",
    "date_updated": "2015-12-03",
    "description": "    Data Analysis in Insurance Industry -----------------------------------    -----------------------------------  In this Project, We have analyzed an insurance industry data for car Accidents.To analyze the data follow the steps.  **Prerequisites:**  Microsoft Azure account [Click here for trial account][1]  Cloud Berry for Azure [To download click here][2]   **Steps:**          **1.** After creating an account on     Microsoft's Azure, create     an HDInsight cluster.       - Go to Azure portal after creating an account in Azure.    - Click on New   - In Data+Analytics, Select HDInsight   - A new pop-up will appear, Type the cluster name. Select type as &amp;quot;Hadoop&amp;quot;, Operating  System as&amp;quot;Linux&amp;quot;, Select Total node as 2, Put Login name and password, And click on *create*.   - Azure will start deploying a cluster. It will take few minutes to complete the  process.     **2.**  After Creating the cluster, we  will upload data into the cluster. You can get Insurance's Sam...",
    "forks_count": 1,
    "html_url": "https://github.com/nparab/insurance",
    "keywords": [
        "use after free analysis",
        "Microsoft use after free analysis",
        "Microsoft use after free"
    ],
    "language": null,
    "repo_name": "insurance",
    "repo_owner": "nparab",
    "repotime": "2015-12-03, 01:30:17",
    "stargazers_count": 0,
    "watchers_count": 0
}
{
    "commits_count": 6,
    "date_started": "2015-12-02",
    "date_updated": "2015-12-02",
    "description": "Script to exploit the Kodi local file inclusion vulnerability.",
    "forks_count": 1,
    "html_url": "https://github.com/darkerego/kodi-sploit",
    "keywords": [
        "local file inclusion"
    ],
    "language": "Shell",
    "repo_name": "kodi-sploit",
    "repo_owner": "darkerego",
    "repotime": "2015-12-02, 17:02:53",
    "stargazers_count": 1,
    "watchers_count": 1
}
{
    "commits_count": 33,
    "date_started": "2015-12-28",
    "date_updated": "2015-12-28",
    "description": "MovieEye uses django-rest-framework and django to first create an api and then use the api in another app to display movie information. An admin can add,delete movies. Unauthenticated users can read-only",
    "forks_count": 0,
    "html_url": "https://github.com/saket-mishra/MovieEye---IMDB-like-API-integration-with-rest-framework",
    "keywords": [
        "unauthenticated user"
    ],
    "language": "CSS",
    "repo_name": "MovieEye---IMDB-like-API-integration-with-rest-framework",
    "repo_owner": "saket-mishra",
    "repotime": "2015-12-28, 18:02:47",
    "stargazers_count": 0,
    "watchers_count": 0
}
{
    "commits_count": 18,
    "date_started": "2015-03-15",
    "date_updated": "2015-12-14",
    "description": "list of sql-injection and XSS strings",
    "forks_count": 22,
    "html_url": "https://github.com/danTaler/detectionString",
    "keywords": [
        "sql injection"
    ],
    "language": null,
    "repo_name": "detectionString",
    "repo_owner": "danTaler",
    "repotime": "2015-12-14, 16:47:36",
    "stargazers_count": 115,
    "watchers_count": 115
}
{
    "commits_count": 1,
    "date_started": "2015-12-11",
    "date_updated": "2015-12-11",
    "description": "Quick python script to automatically load NTLM hashes from Responder logs and fires up Hashcat to crack them ",
    "forks_count": 25,
    "html_url": "https://github.com/sensepost/autoresponder",
    "keywords": [
        "by_owner"
    ],
    "language": "Python",
    "repo_name": "autoresponder",
    "repo_owner": "sensepost",
    "repotime": "2015-12-11, 13:28:31",
    "stargazers_count": 79,
    "watchers_count": 79
}
{
    "commits_count": 1,
    "date_started": "2015-12-03",
    "date_updated": "2015-12-03",
    "description": "    Data Analysis in Insurance Industry -----------------------------------    -----------------------------------  In this Project, We have analyzed an insurance industry data for car Accidents.To analyze the data follow the steps.  **Prerequisites:**  Microsoft Azure account [Click here for trial account][1]  Cloud Berry for Azure [To download click here][2]   **Steps:**          **1.** After creating an account on     Microsoft's Azure, create     an HDInsight cluster.       - Go to Azure portal after creating an account in Azure.    - Click on New   - In Data+Analytics, Select HDInsight   - A new pop-up will appear, Type the cluster name. Select type as &amp;quot;Hadoop&amp;quot;, Operating  System as&amp;quot;Linux&amp;quot;, Select Total node as 2, Put Login name and password, And click on *create*.   - Azure will start deploying a cluster. It will take few minutes to complete the  process.     **2.**  After Creating the cluster, we  will upload data into the cluster. You can get Insurance's Sam...",
    "forks_count": 1,
    "html_url": "https://github.com/nparab/insurance",
    "keywords": [
        "use after free analysis",
        "Microsoft use after free analysis",
        "Microsoft use after free"
    ],
    "language": null,
    "repo_name": "insurance",
    "repo_owner": "nparab",
    "repotime": "2015-12-03, 01:30:17",
    "stargazers_count": 0,
    "watchers_count": 0
}
{
    "commits_count": 6,
    "date_started": "2015-12-02",
    "date_updated": "2015-12-02",
    "description": "Script to exploit the Kodi local file inclusion vulnerability.",
    "forks_count": 1,
    "html_url": "https://github.com/darkerego/kodi-sploit",
    "keywords": [
        "local file inclusion"
    ],
    "language": "Shell",
    "repo_name": "kodi-sploit",
    "repo_owner": "darkerego",
    "repotime": "2015-12-02, 17:02:53",
    "stargazers_count": 1,
    "watchers_count": 1
}
{
    "commits_count": 33,
    "date_started": "2015-12-28",
    "date_updated": "2015-12-28",
    "description": "MovieEye uses django-rest-framework and django to first create an api and then use the api in another app to display movie information. An admin can add,delete movies. Unauthenticated users can read-only",
    "forks_count": 0,
    "html_url": "https://github.com/saket-mishra/MovieEye---IMDB-like-API-integration-with-rest-framework",
    "keywords": [
        "unauthenticated user"
    ],
    "language": "CSS",
    "repo_name": "MovieEye---IMDB-like-API-integration-with-rest-framework",
    "repo_owner": "saket-mishra",
    "repotime": "2015-12-28, 18:02:47",
    "stargazers_count": 0,
    "watchers_count": 0
}
{
    "commits_count": 18,
    "date_started": "2015-03-15",
    "date_updated": "2015-12-14",
    "description": "list of sql-injection and XSS strings",
    "forks_count": 22,
    "html_url": "https://github.com/danTaler/detectionString",
    "keywords": [
        "sql injection"
    ],
    "language": null,
    "repo_name": "detectionString",
    "repo_owner": "danTaler",
    "repotime": "2015-12-14, 16:47:36",
    "stargazers_count": 115,
    "watchers_count": 115
}
{
    "commits_count": 1,
    "date_started": "2015-12-11",
    "date_updated": "2015-12-11",
    "description": "Quick python script to automatically load NTLM hashes from Responder logs and fires up Hashcat to crack them ",
    "forks_count": 25,
    "html_url": "https://github.com/sensepost/autoresponder",
    "keywords": [
        "by_owner"
    ],
    "language": "Python",
    "repo_name": "autoresponder",
    "repo_owner": "sensepost",
    "repotime": "2015-12-11, 13:28:31",
    "stargazers_count": 79,
    "watchers_count": 79
}
{
    "commits_count": 1,
    "date_started": "2015-12-03",
    "date_updated": "2015-12-03",
    "description": "    Data Analysis in Insurance Industry -----------------------------------    -----------------------------------  In this Project, We have analyzed an insurance industry data for car Accidents.To analyze the data follow the steps.  **Prerequisites:**  Microsoft Azure account [Click here for trial account][1]  Cloud Berry for Azure [To download click here][2]   **Steps:**          **1.** After creating an account on     Microsoft's Azure, create     an HDInsight cluster.       - Go to Azure portal after creating an account in Azure.    - Click on New   - In Data+Analytics, Select HDInsight   - A new pop-up will appear, Type the cluster name. Select type as &amp;quot;Hadoop&amp;quot;, Operating  System as&amp;quot;Linux&amp;quot;, Select Total node as 2, Put Login name and password, And click on *create*.   - Azure will start deploying a cluster. It will take few minutes to complete the  process.     **2.**  After Creating the cluster, we  will upload data into the cluster. You can get Insurance's Sam...",
    "forks_count": 1,
    "html_url": "https://github.com/nparab/insurance",
    "keywords": [
        "use after free analysis",
        "Microsoft use after free analysis",
        "Microsoft use after free"
    ],
    "language": null,
    "repo_name": "insurance",
    "repo_owner": "nparab",
    "repotime": "2015-12-03, 01:30:17",
    "stargazers_count": 0,
    "watchers_count": 0
}
{
    "commits_count": 6,
    "date_started": "2015-12-02",
    "date_updated": "2015-12-02",
    "description": "Script to exploit the Kodi local file inclusion vulnerability.",
    "forks_count": 1,
    "html_url": "https://github.com/darkerego/kodi-sploit",
    "keywords": [
        "local file inclusion"
    ],
    "language": "Shell",
    "repo_name": "kodi-sploit",
    "repo_owner": "darkerego",
    "repotime": "2015-12-02, 17:02:53",
    "stargazers_count": 1,
    "watchers_count": 1
}
{
    "commits_count": 33,
    "date_started": "2015-12-28",
    "date_updated": "2015-12-28",
    "description": "MovieEye uses django-rest-framework and django to first create an api and then use the api in another app to display movie information. An admin can add,delete movies. Unauthenticated users can read-only",
    "forks_count": 0,
    "html_url": "https://github.com/saket-mishra/MovieEye---IMDB-like-API-integration-with-rest-framework",
    "keywords": [
        "unauthenticated user"
    ],
    "language": "CSS",
    "repo_name": "MovieEye---IMDB-like-API-integration-with-rest-framework",
    "repo_owner": "saket-mishra",
    "repotime": "2015-12-28, 18:02:47",
    "stargazers_count": 0,
    "watchers_count": 0
}
{
    "commits_count": 18,
    "date_started": "2015-03-15",
    "date_updated": "2015-12-14",
    "description": "list of sql-injection and XSS strings",
    "forks_count": 22,
    "html_url": "https://github.com/danTaler/detectionString",
    "keywords": [
        "sql injection"
    ],
    "language": null,
    "repo_name": "detectionString",
    "repo_owner": "danTaler",
    "repotime": "2015-12-14, 16:47:36",
    "stargazers_count": 115,
    "watchers_count": 115
}
{
    "commits_count": 1,
    "date_started": "2015-12-11",
    "date_updated": "2015-12-11",
    "description": "Quick python script to automatically load NTLM hashes from Responder logs and fires up Hashcat to crack them ",
    "forks_count": 25,
    "html_url": "https://github.com/sensepost/autoresponder",
    "keywords": [
        "by_owner"
    ],
    "language": "Python",
    "repo_name": "autoresponder",
    "repo_owner": "sensepost",
    "repotime": "2015-12-11, 13:28:31",
    "stargazers_count": 79,
    "watchers_count": 79
}
{
    "commits_count": 1,
    "date_started": "2015-12-03",
    "date_updated": "2015-12-03",
    "description": "    Data Analysis in Insurance Industry -----------------------------------    -----------------------------------  In this Project, We have analyzed an insurance industry data for car Accidents.To analyze the data follow the steps.  **Prerequisites:**  Microsoft Azure account [Click here for trial account][1]  Cloud Berry for Azure [To download click here][2]   **Steps:**          **1.** After creating an account on     Microsoft's Azure, create     an HDInsight cluster.       - Go to Azure portal after creating an account in Azure.    - Click on New   - In Data+Analytics, Select HDInsight   - A new pop-up will appear, Type the cluster name. Select type as &amp;quot;Hadoop&amp;quot;, Operating  System as&amp;quot;Linux&amp;quot;, Select Total node as 2, Put Login name and password, And click on *create*.   - Azure will start deploying a cluster. It will take few minutes to complete the  process.     **2.**  After Creating the cluster, we  will upload data into the cluster. You can get Insurance's Sam...",
    "forks_count": 1,
    "html_url": "https://github.com/nparab/insurance",
    "keywords": [
        "use after free analysis",
        "Microsoft use after free analysis",
        "Microsoft use after free"
    ],
    "language": null,
    "repo_name": "insurance",
    "repo_owner": "nparab",
    "repotime": "2015-12-03, 01:30:17",
    "stargazers_count": 0,
    "watchers_count": 0
}
{
    "commits_count": 6,
    "date_started": "2015-12-02",
    "date_updated": "2015-12-02",
    "description": "Script to exploit the Kodi local file inclusion vulnerability.",
    "forks_count": 1,
    "html_url": "https://github.com/darkerego/kodi-sploit",
    "keywords": [
        "local file inclusion"
    ],
    "language": "Shell",
    "repo_name": "kodi-sploit",
    "repo_owner": "darkerego",
    "repotime": "2015-12-02, 17:02:53",
    "stargazers_count": 1,
    "watchers_count": 1
}
{
    "commits_count": 33,
    "date_started": "2015-12-28",
    "date_updated": "2015-12-28",
    "description": "MovieEye uses django-rest-framework and django to first create an api and then use the api in another app to display movie information. An admin can add,delete movies. Unauthenticated users can read-only",
    "forks_count": 0,
    "html_url": "https://github.com/saket-mishra/MovieEye---IMDB-like-API-integration-with-rest-framework",
    "keywords": [
        "unauthenticated user"
    ],
    "language": "CSS",
    "repo_name": "MovieEye---IMDB-like-API-integration-with-rest-framework",
    "repo_owner": "saket-mishra",
    "repotime": "2015-12-28, 18:02:47",
    "stargazers_count": 0,
    "watchers_count": 0
}
{
    "commits_count": 18,
    "date_started": "2015-03-15",
    "date_updated": "2015-12-14",
    "description": "list of sql-injection and XSS strings",
    "forks_count": 22,
    "html_url": "https://github.com/danTaler/detectionString",
    "keywords": [
        "sql injection"
    ],
    "language": null,
    "repo_name": "detectionString",
    "repo_owner": "danTaler",
    "repotime": "2015-12-14, 16:47:36",
    "stargazers_count": 115,
    "watchers_count": 115
}
{
    "commits_count": 1,
    "date_started": "2015-12-11",
    "date_updated": "2015-12-11",
    "description": "Quick python script to automatically load NTLM hashes from Responder logs and fires up Hashcat to crack them ",
    "forks_count": 25,
    "html_url": "https://github.com/sensepost/autoresponder",
    "keywords": [
        "by_owner"
    ],
    "language": "Python",
    "repo_name": "autoresponder",
    "repo_owner": "sensepost",
    "repotime": "2015-12-11, 13:28:31",
    "stargazers_count": 79,
    "watchers_count": 79
}
{
    "commits_count": 1,
    "date_started": "2015-12-03",
    "date_updated": "2015-12-03",
    "description": "    Data Analysis in Insurance Industry -----------------------------------    -----------------------------------  In this Project, We have analyzed an insurance industry data for car Accidents.To analyze the data follow the steps.  **Prerequisites:**  Microsoft Azure account [Click here for trial account][1]  Cloud Berry for Azure [To download click here][2]   **Steps:**          **1.** After creating an account on     Microsoft's Azure, create     an HDInsight cluster.       - Go to Azure portal after creating an account in Azure.    - Click on New   - In Data+Analytics, Select HDInsight   - A new pop-up will appear, Type the cluster name. Select type as &amp;quot;Hadoop&amp;quot;, Operating  System as&amp;quot;Linux&amp;quot;, Select Total node as 2, Put Login name and password, And click on *create*.   - Azure will start deploying a cluster. It will take few minutes to complete the  process.     **2.**  After Creating the cluster, we  will upload data into the cluster. You can get Insurance's Sam...",
    "forks_count": 1,
    "html_url": "https://github.com/nparab/insurance",
    "keywords": [
        "use after free analysis",
        "Microsoft use after free analysis",
        "Microsoft use after free"
    ],
    "language": null,
    "repo_name": "insurance",
    "repo_owner": "nparab",
    "repotime": "2015-12-03, 01:30:17",
    "stargazers_count": 0,
    "watchers_count": 0
}
{
    "commits_count": 6,
    "date_started": "2015-12-02",
    "date_updated": "2015-12-02",
    "description": "Script to exploit the Kodi local file inclusion vulnerability.",
    "forks_count": 1,
    "html_url": "https://github.com/darkerego/kodi-sploit",
    "keywords": [
        "local file inclusion"
    ],
    "language": "Shell",
    "repo_name": "kodi-sploit",
    "repo_owner": "darkerego",
    "repotime": "2015-12-02, 17:02:53",
    "stargazers_count": 1,
    "watchers_count": 1
}
{
    "commits_count": 33,
    "date_started": "2015-12-28",
    "date_updated": "2015-12-28",
    "description": "MovieEye uses django-rest-framework and django to first create an api and then use the api in another app to display movie information. An admin can add,delete movies. Unauthenticated users can read-only",
    "forks_count": 0,
    "html_url": "https://github.com/saket-mishra/MovieEye---IMDB-like-API-integration-with-rest-framework",
    "keywords": [
        "unauthenticated user"
    ],
    "language": "CSS",
    "repo_name": "MovieEye---IMDB-like-API-integration-with-rest-framework",
    "repo_owner": "saket-mishra",
    "repotime": "2015-12-28, 18:02:47",
    "stargazers_count": 0,
    "watchers_count": 0
}
{
    "commits_count": 18,
    "date_started": "2015-03-15",
    "date_updated": "2015-12-14",
    "description": "list of sql-injection and XSS strings",
    "forks_count": 22,
    "html_url": "https://github.com/danTaler/detectionString",
    "keywords": [
        "sql injection"
    ],
    "language": null,
    "repo_name": "detectionString",
    "repo_owner": "danTaler",
    "repotime": "2015-12-14, 16:47:36",
    "stargazers_count": 115,
    "watchers_count": 115
}
{
    "commits_count": 1,
    "date_started": "2015-12-11",
    "date_updated": "2015-12-11",
    "description": "Quick python script to automatically load NTLM hashes from Responder logs and fires up Hashcat to crack them ",
    "forks_count": 25,
    "html_url": "https://github.com/sensepost/autoresponder",
    "keywords": [
        "by_owner"
    ],
    "language": "Python",
    "repo_name": "autoresponder",
    "repo_owner": "sensepost",
    "repotime": "2015-12-11, 13:28:31",
    "stargazers_count": 79,
    "watchers_count": 79
}
{
    "commits_count": 1,
    "date_started": "2015-12-03",
    "date_updated": "2015-12-03",
    "description": "    Data Analysis in Insurance Industry -----------------------------------    -----------------------------------  In this Project, We have analyzed an insurance industry data for car Accidents.To analyze the data follow the steps.  **Prerequisites:**  Microsoft Azure account [Click here for trial account][1]  Cloud Berry for Azure [To download click here][2]   **Steps:**          **1.** After creating an account on     Microsoft's Azure, create     an HDInsight cluster.       - Go to Azure portal after creating an account in Azure.    - Click on New   - In Data+Analytics, Select HDInsight   - A new pop-up will appear, Type the cluster name. Select type as &amp;quot;Hadoop&amp;quot;, Operating  System as&amp;quot;Linux&amp;quot;, Select Total node as 2, Put Login name and password, And click on *create*.   - Azure will start deploying a cluster. It will take few minutes to complete the  process.     **2.**  After Creating the cluster, we  will upload data into the cluster. You can get Insurance's Sam...",
    "forks_count": 1,
    "html_url": "https://github.com/nparab/insurance",
    "keywords": [
        "use after free analysis",
        "Microsoft use after free analysis",
        "Microsoft use after free"
    ],
    "language": null,
    "repo_name": "insurance",
    "repo_owner": "nparab",
    "repotime": "2015-12-03, 01:30:17",
    "stargazers_count": 0,
    "watchers_count": 0
}
{
    "commits_count": 6,
    "date_started": "2015-12-02",
    "date_updated": "2015-12-02",
    "description": "Script to exploit the Kodi local file inclusion vulnerability.",
    "forks_count": 1,
    "html_url": "https://github.com/darkerego/kodi-sploit",
    "keywords": [
        "local file inclusion"
    ],
    "language": "Shell",
    "repo_name": "kodi-sploit",
    "repo_owner": "darkerego",
    "repotime": "2015-12-02, 17:02:53",
    "stargazers_count": 1,
    "watchers_count": 1
}
{
    "commits_count": 33,
    "date_started": "2015-12-28",
    "date_updated": "2015-12-28",
    "description": "MovieEye uses django-rest-framework and django to first create an api and then use the api in another app to display movie information. An admin can add,delete movies. Unauthenticated users can read-only",
    "forks_count": 0,
    "html_url": "https://github.com/saket-mishra/MovieEye---IMDB-like-API-integration-with-rest-framework",
    "keywords": [
        "unauthenticated user"
    ],
    "language": "CSS",
    "repo_name": "MovieEye---IMDB-like-API-integration-with-rest-framework",
    "repo_owner": "saket-mishra",
    "repotime": "2015-12-28, 18:02:47",
    "stargazers_count": 0,
    "watchers_count": 0
}
{
    "commits_count": 18,
    "date_started": "2015-03-15",
    "date_updated": "2015-12-14",
    "description": "list of sql-injection and XSS strings",
    "forks_count": 22,
    "html_url": "https://github.com/danTaler/detectionString",
    "keywords": [
        "sql injection"
    ],
    "language": null,
    "repo_name": "detectionString",
    "repo_owner": "danTaler",
    "repotime": "2015-12-14, 16:47:36",
    "stargazers_count": 115,
    "watchers_count": 115
}
{
    "commits_count": 1,
    "date_started": "2015-12-11",
    "date_updated": "2015-12-11",
    "description": "Quick python script to automatically load NTLM hashes from Responder logs and fires up Hashcat to crack them ",
    "forks_count": 25,
    "html_url": "https://github.com/sensepost/autoresponder",
    "keywords": [
        "by_owner"
    ],
    "language": "Python",
    "repo_name": "autoresponder",
    "repo_owner": "sensepost",
    "repotime": "2015-12-11, 13:28:31",
    "stargazers_count": 79,
    "watchers_count": 79
}
{
    "commits_count": 1,
    "date_started": "2015-12-03",
    "date_updated": "2015-12-03",
    "description": "    Data Analysis in Insurance Industry -----------------------------------    -----------------------------------  In this Project, We have analyzed an insurance industry data for car Accidents.To analyze the data follow the steps.  **Prerequisites:**  Microsoft Azure account [Click here for trial account][1]  Cloud Berry for Azure [To download click here][2]   **Steps:**          **1.** After creating an account on     Microsoft's Azure, create     an HDInsight cluster.       - Go to Azure portal after creating an account in Azure.    - Click on New   - In Data+Analytics, Select HDInsight   - A new pop-up will appear, Type the cluster name. Select type as &amp;quot;Hadoop&amp;quot;, Operating  System as&amp;quot;Linux&amp;quot;, Select Total node as 2, Put Login name and password, And click on *create*.   - Azure will start deploying a cluster. It will take few minutes to complete the  process.     **2.**  After Creating the cluster, we  will upload data into the cluster. You can get Insurance's Sam...",
    "forks_count": 1,
    "html_url": "https://github.com/nparab/insurance",
    "keywords": [
        "use after free analysis",
        "Microsoft use after free analysis",
        "Microsoft use after free"
    ],
    "language": null,
    "repo_name": "insurance",
    "repo_owner": "nparab",
    "repotime": "2015-12-03, 01:30:17",
    "stargazers_count": 0,
    "watchers_count": 0
}
{
    "commits_count": 6,
    "date_started": "2015-12-02",
    "date_updated": "2015-12-02",
    "description": "Script to exploit the Kodi local file inclusion vulnerability.",
    "forks_count": 1,
    "html_url": "https://github.com/darkerego/kodi-sploit",
    "keywords": [
        "local file inclusion"
    ],
    "language": "Shell",
    "repo_name": "kodi-sploit",
    "repo_owner": "darkerego",
    "repotime": "2015-12-02, 17:02:53",
    "stargazers_count": 1,
    "watchers_count": 1
}
{
    "commits_count": 33,
    "date_started": "2015-12-28",
    "date_updated": "2015-12-28",
    "description": "MovieEye uses django-rest-framework and django to first create an api and then use the api in another app to display movie information. An admin can add,delete movies. Unauthenticated users can read-only",
    "forks_count": 0,
    "html_url": "https://github.com/saket-mishra/MovieEye---IMDB-like-API-integration-with-rest-framework",
    "keywords": [
        "unauthenticated user"
    ],
    "language": "CSS",
    "repo_name": "MovieEye---IMDB-like-API-integration-with-rest-framework",
    "repo_owner": "saket-mishra",
    "repotime": "2015-12-28, 18:02:47",
    "stargazers_count": 0,
    "watchers_count": 0
}
{
    "commits_count": 18,
    "date_started": "2015-03-15",
    "date_updated": "2015-12-14",
    "description": "list of sql-injection and XSS strings",
    "forks_count": 22,
    "html_url": "https://github.com/danTaler/detectionString",
    "keywords": [
        "sql injection"
    ],
    "language": null,
    "repo_name": "detectionString",
    "repo_owner": "danTaler",
    "repotime": "2015-12-14, 16:47:36",
    "stargazers_count": 115,
    "watchers_count": 115
}
{
    "commits_count": 1,
    "date_started": "2015-12-11",
    "date_updated": "2015-12-11",
    "description": "Quick python script to automatically load NTLM hashes from Responder logs and fires up Hashcat to crack them ",
    "forks_count": 25,
    "html_url": "https://github.com/sensepost/autoresponder",
    "keywords": [
        "by_owner"
    ],
    "language": "Python",
    "repo_name": "autoresponder",
    "repo_owner": "sensepost",
    "repotime": "2015-12-11, 13:28:31",
    "stargazers_count": 79,
    "watchers_count": 79
}
{
    "commits_count": 1,
    "date_started": "2015-12-03",
    "date_updated": "2015-12-03",
    "description": "    Data Analysis in Insurance Industry -----------------------------------    -----------------------------------  In this Project, We have analyzed an insurance industry data for car Accidents.To analyze the data follow the steps.  **Prerequisites:**  Microsoft Azure account [Click here for trial account][1]  Cloud Berry for Azure [To download click here][2]   **Steps:**          **1.** After creating an account on     Microsoft's Azure, create     an HDInsight cluster.       - Go to Azure portal after creating an account in Azure.    - Click on New   - In Data+Analytics, Select HDInsight   - A new pop-up will appear, Type the cluster name. Select type as &amp;quot;Hadoop&amp;quot;, Operating  System as&amp;quot;Linux&amp;quot;, Select Total node as 2, Put Login name and password, And click on *create*.   - Azure will start deploying a cluster. It will take few minutes to complete the  process.     **2.**  After Creating the cluster, we  will upload data into the cluster. You can get Insurance's Sam...",
    "forks_count": 1,
    "html_url": "https://github.com/nparab/insurance",
    "keywords": [
        "use after free analysis",
        "Microsoft use after free analysis",
        "Microsoft use after free"
    ],
    "language": null,
    "repo_name": "insurance",
    "repo_owner": "nparab",
    "repotime": "2015-12-03, 01:30:17",
    "stargazers_count": 0,
    "watchers_count": 0
}
{
    "commits_count": 6,
    "date_started": "2015-12-02",
    "date_updated": "2015-12-02",
    "description": "Script to exploit the Kodi local file inclusion vulnerability.",
    "forks_count": 1,
    "html_url": "https://github.com/darkerego/kodi-sploit",
    "keywords": [
        "local file inclusion"
    ],
    "language": "Shell",
    "repo_name": "kodi-sploit",
    "repo_owner": "darkerego",
    "repotime": "2015-12-02, 17:02:53",
    "stargazers_count": 1,
    "watchers_count": 1
}
{
    "commits_count": 33,
    "date_started": "2015-12-28",
    "date_updated": "2015-12-28",
    "description": "MovieEye uses django-rest-framework and django to first create an api and then use the api in another app to display movie information. An admin can add,delete movies. Unauthenticated users can read-only",
    "forks_count": 0,
    "html_url": "https://github.com/saket-mishra/MovieEye---IMDB-like-API-integration-with-rest-framework",
    "keywords": [
        "unauthenticated user"
    ],
    "language": "CSS",
    "repo_name": "MovieEye---IMDB-like-API-integration-with-rest-framework",
    "repo_owner": "saket-mishra",
    "repotime": "2015-12-28, 18:02:47",
    "stargazers_count": 0,
    "watchers_count": 0
}
{
    "commits_count": 18,
    "date_started": "2015-03-15",
    "date_updated": "2015-12-14",
    "description": "list of sql-injection and XSS strings",
    "forks_count": 22,
    "html_url": "https://github.com/danTaler/detectionString",
    "keywords": [
        "sql injection"
    ],
    "language": null,
    "repo_name": "detectionString",
    "repo_owner": "danTaler",
    "repotime": "2015-12-14, 16:47:36",
    "stargazers_count": 115,
    "watchers_count": 115
}
{
    "commits_count": 1,
    "date_started": "2015-12-11",
    "date_updated": "2015-12-11",
    "description": "Quick python script to automatically load NTLM hashes from Responder logs and fires up Hashcat to crack them ",
    "forks_count": 25,
    "html_url": "https://github.com/sensepost/autoresponder",
    "keywords": [
        "by_owner"
    ],
    "language": "Python",
    "repo_name": "autoresponder",
    "repo_owner": "sensepost",
    "repotime": "2015-12-11, 13:28:31",
    "stargazers_count": 79,
    "watchers_count": 79
}
{
    "commits_count": 1,
    "date_started": "2015-12-03",
    "date_updated": "2015-12-03",
    "description": "    Data Analysis in Insurance Industry -----------------------------------    -----------------------------------  In this Project, We have analyzed an insurance industry data for car Accidents.To analyze the data follow the steps.  **Prerequisites:**  Microsoft Azure account [Click here for trial account][1]  Cloud Berry for Azure [To download click here][2]   **Steps:**          **1.** After creating an account on     Microsoft's Azure, create     an HDInsight cluster.       - Go to Azure portal after creating an account in Azure.    - Click on New   - In Data+Analytics, Select HDInsight   - A new pop-up will appear, Type the cluster name. Select type as &amp;quot;Hadoop&amp;quot;, Operating  System as&amp;quot;Linux&amp;quot;, Select Total node as 2, Put Login name and password, And click on *create*.   - Azure will start deploying a cluster. It will take few minutes to complete the  process.     **2.**  After Creating the cluster, we  will upload data into the cluster. You can get Insurance's Sam...",
    "forks_count": 1,
    "html_url": "https://github.com/nparab/insurance",
    "keywords": [
        "use after free analysis",
        "Microsoft use after free analysis",
        "Microsoft use after free"
    ],
    "language": null,
    "repo_name": "insurance",
    "repo_owner": "nparab",
    "repotime": "2015-12-03, 01:30:17",
    "stargazers_count": 0,
    "watchers_count": 0
}
{
    "commits_count": 6,
    "date_started": "2015-12-02",
    "date_updated": "2015-12-02",
    "description": "Script to exploit the Kodi local file inclusion vulnerability.",
    "forks_count": 1,
    "html_url": "https://github.com/darkerego/kodi-sploit",
    "keywords": [
        "local file inclusion"
    ],
    "language": "Shell",
    "repo_name": "kodi-sploit",
    "repo_owner": "darkerego",
    "repotime": "2015-12-02, 17:02:53",
    "stargazers_count": 1,
    "watchers_count": 1
}
{
    "commits_count": 33,
    "date_started": "2015-12-28",
    "date_updated": "2015-12-28",
    "description": "MovieEye uses django-rest-framework and django to first create an api and then use the api in another app to display movie information. An admin can add,delete movies. Unauthenticated users can read-only",
    "forks_count": 0,
    "html_url": "https://github.com/saket-mishra/MovieEye---IMDB-like-API-integration-with-rest-framework",
    "keywords": [
        "unauthenticated user"
    ],
    "language": "CSS",
    "repo_name": "MovieEye---IMDB-like-API-integration-with-rest-framework",
    "repo_owner": "saket-mishra",
    "repotime": "2015-12-28, 18:02:47",
    "stargazers_count": 0,
    "watchers_count": 0
}
{
    "commits_count": 18,
    "date_started": "2015-03-15",
    "date_updated": "2015-12-14",
    "description": "list of sql-injection and XSS strings",
    "forks_count": 22,
    "html_url": "https://github.com/danTaler/detectionString",
    "keywords": [
        "sql injection"
    ],
    "language": null,
    "repo_name": "detectionString",
    "repo_owner": "danTaler",
    "repotime": "2015-12-14, 16:47:36",
    "stargazers_count": 115,
    "watchers_count": 115
}
{
    "commits_count": 1,
    "date_started": "2015-12-11",
    "date_updated": "2015-12-11",
    "description": "Quick python script to automatically load NTLM hashes from Responder logs and fires up Hashcat to crack them ",
    "forks_count": 25,
    "html_url": "https://github.com/sensepost/autoresponder",
    "keywords": [
        "by_owner"
    ],
    "language": "Python",
    "repo_name": "autoresponder",
    "repo_owner": "sensepost",
    "repotime": "2015-12-11, 13:28:31",
    "stargazers_count": 79,
    "watchers_count": 79
}
{
    "commits_count": 1,
    "date_started": "2015-12-03",
    "date_updated": "2015-12-03",
    "description": "    Data Analysis in Insurance Industry -----------------------------------    -----------------------------------  In this Project, We have analyzed an insurance industry data for car Accidents.To analyze the data follow the steps.  **Prerequisites:**  Microsoft Azure account [Click here for trial account][1]  Cloud Berry for Azure [To download click here][2]   **Steps:**          **1.** After creating an account on     Microsoft's Azure, create     an HDInsight cluster.       - Go to Azure portal after creating an account in Azure.    - Click on New   - In Data+Analytics, Select HDInsight   - A new pop-up will appear, Type the cluster name. Select type as &amp;quot;Hadoop&amp;quot;, Operating  System as&amp;quot;Linux&amp;quot;, Select Total node as 2, Put Login name and password, And click on *create*.   - Azure will start deploying a cluster. It will take few minutes to complete the  process.     **2.**  After Creating the cluster, we  will upload data into the cluster. You can get Insurance's Sam...",
    "forks_count": 1,
    "html_url": "https://github.com/nparab/insurance",
    "keywords": [
        "use after free analysis",
        "Microsoft use after free analysis",
        "Microsoft use after free"
    ],
    "language": null,
    "repo_name": "insurance",
    "repo_owner": "nparab",
    "repotime": "2015-12-03, 01:30:17",
    "stargazers_count": 0,
    "watchers_count": 0
}
{
    "commits_count": 6,
    "date_started": "2015-12-02",
    "date_updated": "2015-12-02",
    "description": "Script to exploit the Kodi local file inclusion vulnerability.",
    "forks_count": 1,
    "html_url": "https://github.com/darkerego/kodi-sploit",
    "keywords": [
        "local file inclusion"
    ],
    "language": "Shell",
    "repo_name": "kodi-sploit",
    "repo_owner": "darkerego",
    "repotime": "2015-12-02, 17:02:53",
    "stargazers_count": 1,
    "watchers_count": 1
}
{
    "commits_count": 33,
    "date_started": "2015-12-28",
    "date_updated": "2015-12-28",
    "description": "MovieEye uses django-rest-framework and django to first create an api and then use the api in another app to display movie information. An admin can add,delete movies. Unauthenticated users can read-only",
    "forks_count": 0,
    "html_url": "https://github.com/saket-mishra/MovieEye---IMDB-like-API-integration-with-rest-framework",
    "keywords": [
        "unauthenticated user"
    ],
    "language": "CSS",
    "repo_name": "MovieEye---IMDB-like-API-integration-with-rest-framework",
    "repo_owner": "saket-mishra",
    "repotime": "2015-12-28, 18:02:47",
    "stargazers_count": 0,
    "watchers_count": 0
}
{
    "commits_count": 18,
    "date_started": "2015-03-15",
    "date_updated": "2015-12-14",
    "description": "list of sql-injection and XSS strings",
    "forks_count": 22,
    "html_url": "https://github.com/danTaler/detectionString",
    "keywords": [
        "sql injection"
    ],
    "language": null,
    "repo_name": "detectionString",
    "repo_owner": "danTaler",
    "repotime": "2015-12-14, 16:47:36",
    "stargazers_count": 115,
    "watchers_count": 115
}
{
    "commits_count": 1,
    "date_started": "2015-12-11",
    "date_updated": "2015-12-11",
    "description": "Quick python script to automatically load NTLM hashes from Responder logs and fires up Hashcat to crack them ",
    "forks_count": 25,
    "html_url": "https://github.com/sensepost/autoresponder",
    "keywords": [
        "by_owner"
    ],
    "language": "Python",
    "repo_name": "autoresponder",
    "repo_owner": "sensepost",
    "repotime": "2015-12-11, 13:28:31",
    "stargazers_count": 79,
    "watchers_count": 79
}
{
    "commits_count": 1,
    "date_started": "2015-12-03",
    "date_updated": "2015-12-03",
    "description": "    Data Analysis in Insurance Industry -----------------------------------    -----------------------------------  In this Project, We have analyzed an insurance industry data for car Accidents.To analyze the data follow the steps.  **Prerequisites:**  Microsoft Azure account [Click here for trial account][1]  Cloud Berry for Azure [To download click here][2]   **Steps:**          **1.** After creating an account on     Microsoft's Azure, create     an HDInsight cluster.       - Go to Azure portal after creating an account in Azure.    - Click on New   - In Data+Analytics, Select HDInsight   - A new pop-up will appear, Type the cluster name. Select type as &amp;quot;Hadoop&amp;quot;, Operating  System as&amp;quot;Linux&amp;quot;, Select Total node as 2, Put Login name and password, And click on *create*.   - Azure will start deploying a cluster. It will take few minutes to complete the  process.     **2.**  After Creating the cluster, we  will upload data into the cluster. You can get Insurance's Sam...",
    "forks_count": 1,
    "html_url": "https://github.com/nparab/insurance",
    "keywords": [
        "use after free analysis",
        "Microsoft use after free analysis",
        "Microsoft use after free"
    ],
    "language": null,
    "repo_name": "insurance",
    "repo_owner": "nparab",
    "repotime": "2015-12-03, 01:30:17",
    "stargazers_count": 0,
    "watchers_count": 0
}
{
    "commits_count": 6,
    "date_started": "2015-12-02",
    "date_updated": "2015-12-02",
    "description": "Script to exploit the Kodi local file inclusion vulnerability.",
    "forks_count": 1,
    "html_url": "https://github.com/darkerego/kodi-sploit",
    "keywords": [
        "local file inclusion"
    ],
    "language": "Shell",
    "repo_name": "kodi-sploit",
    "repo_owner": "darkerego",
    "repotime": "2015-12-02, 17:02:53",
    "stargazers_count": 1,
    "watchers_count": 1
}
{
    "commits_count": 33,
    "date_started": "2015-12-28",
    "date_updated": "2015-12-28",
    "description": "MovieEye uses django-rest-framework and django to first create an api and then use the api in another app to display movie information. An admin can add,delete movies. Unauthenticated users can read-only",
    "forks_count": 0,
    "html_url": "https://github.com/saket-mishra/MovieEye---IMDB-like-API-integration-with-rest-framework",
    "keywords": [
        "unauthenticated user"
    ],
    "language": "CSS",
    "repo_name": "MovieEye---IMDB-like-API-integration-with-rest-framework",
    "repo_owner": "saket-mishra",
    "repotime": "2015-12-28, 18:02:47",
    "stargazers_count": 0,
    "watchers_count": 0
}
{
    "commits_count": 18,
    "date_started": "2015-03-15",
    "date_updated": "2015-12-14",
    "description": "list of sql-injection and XSS strings",
    "forks_count": 22,
    "html_url": "https://github.com/danTaler/detectionString",
    "keywords": [
        "sql injection"
    ],
    "language": null,
    "repo_name": "detectionString",
    "repo_owner": "danTaler",
    "repotime": "2015-12-14, 16:47:36",
    "stargazers_count": 115,
    "watchers_count": 115
}
{
    "commits_count": 1,
    "date_started": "2015-12-11",
    "date_updated": "2015-12-11",
    "description": "Quick python script to automatically load NTLM hashes from Responder logs and fires up Hashcat to crack them ",
    "forks_count": 25,
    "html_url": "https://github.com/sensepost/autoresponder",
    "keywords": [
        "by_owner"
    ],
    "language": "Python",
    "repo_name": "autoresponder",
    "repo_owner": "sensepost",
    "repotime": "2015-12-11, 13:28:31",
    "stargazers_count": 79,
    "watchers_count": 79
}
{
    "commits_count": 1,
    "date_started": "2015-12-03",
    "date_updated": "2015-12-03",
    "description": "    Data Analysis in Insurance Industry -----------------------------------    -----------------------------------  In this Project, We have analyzed an insurance industry data for car Accidents.To analyze the data follow the steps.  **Prerequisites:**  Microsoft Azure account [Click here for trial account][1]  Cloud Berry for Azure [To download click here][2]   **Steps:**          **1.** After creating an account on     Microsoft's Azure, create     an HDInsight cluster.       - Go to Azure portal after creating an account in Azure.    - Click on New   - In Data+Analytics, Select HDInsight   - A new pop-up will appear, Type the cluster name. Select type as &amp;quot;Hadoop&amp;quot;, Operating  System as&amp;quot;Linux&amp;quot;, Select Total node as 2, Put Login name and password, And click on *create*.   - Azure will start deploying a cluster. It will take few minutes to complete the  process.     **2.**  After Creating the cluster, we  will upload data into the cluster. You can get Insurance's Sam...",
    "forks_count": 1,
    "html_url": "https://github.com/nparab/insurance",
    "keywords": [
        "use after free analysis",
        "Microsoft use after free analysis",
        "Microsoft use after free"
    ],
    "language": null,
    "repo_name": "insurance",
    "repo_owner": "nparab",
    "repotime": "2015-12-03, 01:30:17",
    "stargazers_count": 0,
    "watchers_count": 0
}
{
    "commits_count": 6,
    "date_started": "2015-12-02",
    "date_updated": "2015-12-02",
    "description": "Script to exploit the Kodi local file inclusion vulnerability.",
    "forks_count": 1,
    "html_url": "https://github.com/darkerego/kodi-sploit",
    "keywords": [
        "local file inclusion"
    ],
    "language": "Shell",
    "repo_name": "kodi-sploit",
    "repo_owner": "darkerego",
    "repotime": "2015-12-02, 17:02:53",
    "stargazers_count": 1,
    "watchers_count": 1
}
{
    "commits_count": 33,
    "date_started": "2015-12-28",
    "date_updated": "2015-12-28",
    "description": "MovieEye uses django-rest-framework and django to first create an api and then use the api in another app to display movie information. An admin can add,delete movies. Unauthenticated users can read-only",
    "forks_count": 0,
    "html_url": "https://github.com/saket-mishra/MovieEye---IMDB-like-API-integration-with-rest-framework",
    "keywords": [
        "unauthenticated user"
    ],
    "language": "CSS",
    "repo_name": "MovieEye---IMDB-like-API-integration-with-rest-framework",
    "repo_owner": "saket-mishra",
    "repotime": "2015-12-28, 18:02:47",
    "stargazers_count": 0,
    "watchers_count": 0
}
{
    "commits_count": 18,
    "date_started": "2015-03-15",
    "date_updated": "2015-12-14",
    "description": "list of sql-injection and XSS strings",
    "forks_count": 22,
    "html_url": "https://github.com/danTaler/detectionString",
    "keywords": [
        "sql injection"
    ],
    "language": null,
    "repo_name": "detectionString",
    "repo_owner": "danTaler",
    "repotime": "2015-12-14, 16:47:36",
    "stargazers_count": 115,
    "watchers_count": 115
}
{
    "commits_count": 1,
    "date_started": "2015-12-11",
    "date_updated": "2015-12-11",
    "description": "Quick python script to automatically load NTLM hashes from Responder logs and fires up Hashcat to crack them ",
    "forks_count": 25,
    "html_url": "https://github.com/sensepost/autoresponder",
    "keywords": [
        "by_owner"
    ],
    "language": "Python",
    "repo_name": "autoresponder",
    "repo_owner": "sensepost",
    "repotime": "2015-12-11, 13:28:31",
    "stargazers_count": 79,
    "watchers_count": 79
}
{
    "commits_count": 1,
    "date_started": "2015-12-03",
    "date_updated": "2015-12-03",
    "description": "    Data Analysis in Insurance Industry -----------------------------------    -----------------------------------  In this Project, We have analyzed an insurance industry data for car Accidents.To analyze the data follow the steps.  **Prerequisites:**  Microsoft Azure account [Click here for trial account][1]  Cloud Berry for Azure [To download click here][2]   **Steps:**          **1.** After creating an account on     Microsoft's Azure, create     an HDInsight cluster.       - Go to Azure portal after creating an account in Azure.    - Click on New   - In Data+Analytics, Select HDInsight   - A new pop-up will appear, Type the cluster name. Select type as &amp;quot;Hadoop&amp;quot;, Operating  System as&amp;quot;Linux&amp;quot;, Select Total node as 2, Put Login name and password, And click on *create*.   - Azure will start deploying a cluster. It will take few minutes to complete the  process.     **2.**  After Creating the cluster, we  will upload data into the cluster. You can get Insurance's Sam...",
    "forks_count": 1,
    "html_url": "https://github.com/nparab/insurance",
    "keywords": [
        "use after free analysis",
        "Microsoft use after free analysis",
        "Microsoft use after free"
    ],
    "language": null,
    "repo_name": "insurance",
    "repo_owner": "nparab",
    "repotime": "2015-12-03, 01:30:17",
    "stargazers_count": 0,
    "watchers_count": 0
}
{
    "commits_count": 6,
    "date_started": "2015-12-02",
    "date_updated": "2015-12-02",
    "description": "Script to exploit the Kodi local file inclusion vulnerability.",
    "forks_count": 1,
    "html_url": "https://github.com/darkerego/kodi-sploit",
    "keywords": [
        "local file inclusion"
    ],
    "language": "Shell",
    "repo_name": "kodi-sploit",
    "repo_owner": "darkerego",
    "repotime": "2015-12-02, 17:02:53",
    "stargazers_count": 1,
    "watchers_count": 1
}
{
    "commits_count": 33,
    "date_started": "2015-12-28",
    "date_updated": "2015-12-28",
    "description": "MovieEye uses django-rest-framework and django to first create an api and then use the api in another app to display movie information. An admin can add,delete movies. Unauthenticated users can read-only",
    "forks_count": 0,
    "html_url": "https://github.com/saket-mishra/MovieEye---IMDB-like-API-integration-with-rest-framework",
    "keywords": [
        "unauthenticated user"
    ],
    "language": "CSS",
    "repo_name": "MovieEye---IMDB-like-API-integration-with-rest-framework",
    "repo_owner": "saket-mishra",
    "repotime": "2015-12-28, 18:02:47",
    "stargazers_count": 0,
    "watchers_count": 0
}
{
    "commits_count": 18,
    "date_started": "2015-03-15",
    "date_updated": "2015-12-14",
    "description": "list of sql-injection and XSS strings",
    "forks_count": 22,
    "html_url": "https://github.com/danTaler/detectionString",
    "keywords": [
        "sql injection"
    ],
    "language": null,
    "repo_name": "detectionString",
    "repo_owner": "danTaler",
    "repotime": "2015-12-14, 16:47:36",
    "stargazers_count": 115,
    "watchers_count": 115
}
{
    "commits_count": 1,
    "date_started": "2015-12-11",
    "date_updated": "2015-12-11",
    "description": "Quick python script to automatically load NTLM hashes from Responder logs and fires up Hashcat to crack them ",
    "forks_count": 25,
    "html_url": "https://github.com/sensepost/autoresponder",
    "keywords": [
        "by_owner"
    ],
    "language": "Python",
    "repo_name": "autoresponder",
    "repo_owner": "sensepost",
    "repotime": "2015-12-11, 13:28:31",
    "stargazers_count": 79,
    "watchers_count": 79
}
{
    "commits_count": 1,
    "date_started": "2015-12-03",
    "date_updated": "2015-12-03",
    "description": "    Data Analysis in Insurance Industry -----------------------------------    -----------------------------------  In this Project, We have analyzed an insurance industry data for car Accidents.To analyze the data follow the steps.  **Prerequisites:**  Microsoft Azure account [Click here for trial account][1]  Cloud Berry for Azure [To download click here][2]   **Steps:**          **1.** After creating an account on     Microsoft's Azure, create     an HDInsight cluster.       - Go to Azure portal after creating an account in Azure.    - Click on New   - In Data+Analytics, Select HDInsight   - A new pop-up will appear, Type the cluster name. Select type as &amp;quot;Hadoop&amp;quot;, Operating  System as&amp;quot;Linux&amp;quot;, Select Total node as 2, Put Login name and password, And click on *create*.   - Azure will start deploying a cluster. It will take few minutes to complete the  process.     **2.**  After Creating the cluster, we  will upload data into the cluster. You can get Insurance's Sam...",
    "forks_count": 1,
    "html_url": "https://github.com/nparab/insurance",
    "keywords": [
        "use after free analysis",
        "Microsoft use after free analysis",
        "Microsoft use after free"
    ],
    "language": null,
    "repo_name": "insurance",
    "repo_owner": "nparab",
    "repotime": "2015-12-03, 01:30:17",
    "stargazers_count": 0,
    "watchers_count": 0
}
{
    "commits_count": 6,
    "date_started": "2015-12-02",
    "date_updated": "2015-12-02",
    "description": "Script to exploit the Kodi local file inclusion vulnerability.",
    "forks_count": 1,
    "html_url": "https://github.com/darkerego/kodi-sploit",
    "keywords": [
        "local file inclusion"
    ],
    "language": "Shell",
    "repo_name": "kodi-sploit",
    "repo_owner": "darkerego",
    "repotime": "2015-12-02, 17:02:53",
    "stargazers_count": 1,
    "watchers_count": 1
}
{
    "commits_count": 33,
    "date_started": "2015-12-28",
    "date_updated": "2015-12-28",
    "description": "MovieEye uses django-rest-framework and django to first create an api and then use the api in another app to display movie information. An admin can add,delete movies. Unauthenticated users can read-only",
    "forks_count": 0,
    "html_url": "https://github.com/saket-mishra/MovieEye---IMDB-like-API-integration-with-rest-framework",
    "keywords": [
        "unauthenticated user"
    ],
    "language": "CSS",
    "repo_name": "MovieEye---IMDB-like-API-integration-with-rest-framework",
    "repo_owner": "saket-mishra",
    "repotime": "2015-12-28, 18:02:47",
    "stargazers_count": 0,
    "watchers_count": 0
}
{
    "commits_count": 18,
    "date_started": "2015-03-15",
    "date_updated": "2015-12-14",
    "description": "list of sql-injection and XSS strings",
    "forks_count": 22,
    "html_url": "https://github.com/danTaler/detectionString",
    "keywords": [
        "sql injection"
    ],
    "language": null,
    "repo_name": "detectionString",
    "repo_owner": "danTaler",
    "repotime": "2015-12-14, 16:47:36",
    "stargazers_count": 115,
    "watchers_count": 115
}
{
    "commits_count": 1,
    "date_started": "2015-12-11",
    "date_updated": "2015-12-11",
    "description": "Quick python script to automatically load NTLM hashes from Responder logs and fires up Hashcat to crack them ",
    "forks_count": 25,
    "html_url": "https://github.com/sensepost/autoresponder",
    "keywords": [
        "by_owner"
    ],
    "language": "Python",
    "repo_name": "autoresponder",
    "repo_owner": "sensepost",
    "repotime": "2015-12-11, 13:28:31",
    "stargazers_count": 79,
    "watchers_count": 79
}
{
    "commits_count": 1,
    "date_started": "2015-12-03",
    "date_updated": "2015-12-03",
    "description": "    Data Analysis in Insurance Industry -----------------------------------    -----------------------------------  In this Project, We have analyzed an insurance industry data for car Accidents.To analyze the data follow the steps.  **Prerequisites:**  Microsoft Azure account [Click here for trial account][1]  Cloud Berry for Azure [To download click here][2]   **Steps:**          **1.** After creating an account on     Microsoft's Azure, create     an HDInsight cluster.       - Go to Azure portal after creating an account in Azure.    - Click on New   - In Data+Analytics, Select HDInsight   - A new pop-up will appear, Type the cluster name. Select type as &amp;quot;Hadoop&amp;quot;, Operating  System as&amp;quot;Linux&amp;quot;, Select Total node as 2, Put Login name and password, And click on *create*.   - Azure will start deploying a cluster. It will take few minutes to complete the  process.     **2.**  After Creating the cluster, we  will upload data into the cluster. You can get Insurance's Sam...",
    "forks_count": 1,
    "html_url": "https://github.com/nparab/insurance",
    "keywords": [
        "use after free analysis",
        "Microsoft use after free analysis",
        "Microsoft use after free"
    ],
    "language": null,
    "repo_name": "insurance",
    "repo_owner": "nparab",
    "repotime": "2015-12-03, 01:30:17",
    "stargazers_count": 0,
    "watchers_count": 0
}
{
    "commits_count": 6,
    "date_started": "2015-12-02",
    "date_updated": "2015-12-02",
    "description": "Script to exploit the Kodi local file inclusion vulnerability.",
    "forks_count": 1,
    "html_url": "https://github.com/darkerego/kodi-sploit",
    "keywords": [
        "local file inclusion"
    ],
    "language": "Shell",
    "repo_name": "kodi-sploit",
    "repo_owner": "darkerego",
    "repotime": "2015-12-02, 17:02:53",
    "stargazers_count": 1,
    "watchers_count": 1
}
{
    "commits_count": 33,
    "date_started": "2015-12-28",
    "date_updated": "2015-12-28",
    "description": "MovieEye uses django-rest-framework and django to first create an api and then use the api in another app to display movie information. An admin can add,delete movies. Unauthenticated users can read-only",
    "forks_count": 0,
    "html_url": "https://github.com/saket-mishra/MovieEye---IMDB-like-API-integration-with-rest-framework",
    "keywords": [
        "unauthenticated user"
    ],
    "language": "CSS",
    "repo_name": "MovieEye---IMDB-like-API-integration-with-rest-framework",
    "repo_owner": "saket-mishra",
    "repotime": "2015-12-28, 18:02:47",
    "stargazers_count": 0,
    "watchers_count": 0
}
{
    "commits_count": 18,
    "date_started": "2015-03-15",
    "date_updated": "2015-12-14",
    "description": "list of sql-injection and XSS strings",
    "forks_count": 22,
    "html_url": "https://github.com/danTaler/detectionString",
    "keywords": [
        "sql injection"
    ],
    "language": null,
    "repo_name": "detectionString",
    "repo_owner": "danTaler",
    "repotime": "2015-12-14, 16:47:36",
    "stargazers_count": 115,
    "watchers_count": 115
}
{
    "commits_count": 1,
    "date_started": "2015-12-11",
    "date_updated": "2015-12-11",
    "description": "Quick python script to automatically load NTLM hashes from Responder logs and fires up Hashcat to crack them ",
    "forks_count": 25,
    "html_url": "https://github.com/sensepost/autoresponder",
    "keywords": [
        "by_owner"
    ],
    "language": "Python",
    "repo_name": "autoresponder",
    "repo_owner": "sensepost",
    "repotime": "2015-12-11, 13:28:31",
    "stargazers_count": 79,
    "watchers_count": 79
}
{
    "commits_count": 1,
    "date_started": "2015-12-03",
    "date_updated": "2015-12-03",
    "description": "    Data Analysis in Insurance Industry -----------------------------------    -----------------------------------  In this Project, We have analyzed an insurance industry data for car Accidents.To analyze the data follow the steps.  **Prerequisites:**  Microsoft Azure account [Click here for trial account][1]  Cloud Berry for Azure [To download click here][2]   **Steps:**          **1.** After creating an account on     Microsoft's Azure, create     an HDInsight cluster.       - Go to Azure portal after creating an account in Azure.    - Click on New   - In Data+Analytics, Select HDInsight   - A new pop-up will appear, Type the cluster name. Select type as &amp;quot;Hadoop&amp;quot;, Operating  System as&amp;quot;Linux&amp;quot;, Select Total node as 2, Put Login name and password, And click on *create*.   - Azure will start deploying a cluster. It will take few minutes to complete the  process.     **2.**  After Creating the cluster, we  will upload data into the cluster. You can get Insurance's Sam...",
    "forks_count": 1,
    "html_url": "https://github.com/nparab/insurance",
    "keywords": [
        "use after free analysis",
        "Microsoft use after free analysis",
        "Microsoft use after free"
    ],
    "language": null,
    "repo_name": "insurance",
    "repo_owner": "nparab",
    "repotime": "2015-12-03, 01:30:17",
    "stargazers_count": 0,
    "watchers_count": 0
}
{
    "commits_count": 6,
    "date_started": "2015-12-02",
    "date_updated": "2015-12-02",
    "description": "Script to exploit the Kodi local file inclusion vulnerability.",
    "forks_count": 1,
    "html_url": "https://github.com/darkerego/kodi-sploit",
    "keywords": [
        "local file inclusion"
    ],
    "language": "Shell",
    "repo_name": "kodi-sploit",
    "repo_owner": "darkerego",
    "repotime": "2015-12-02, 17:02:53",
    "stargazers_count": 1,
    "watchers_count": 1
}
{
    "commits_count": 33,
    "date_started": "2015-12-28",
    "date_updated": "2015-12-28",
    "description": "MovieEye uses django-rest-framework and django to first create an api and then use the api in another app to display movie information. An admin can add,delete movies. Unauthenticated users can read-only",
    "forks_count": 0,
    "html_url": "https://github.com/saket-mishra/MovieEye---IMDB-like-API-integration-with-rest-framework",
    "keywords": [
        "unauthenticated user"
    ],
    "language": "CSS",
    "repo_name": "MovieEye---IMDB-like-API-integration-with-rest-framework",
    "repo_owner": "saket-mishra",
    "repotime": "2015-12-28, 18:02:47",
    "stargazers_count": 0,
    "watchers_count": 0
}
{
    "commits_count": 18,
    "date_started": "2015-03-15",
    "date_updated": "2015-12-14",
    "description": "list of sql-injection and XSS strings",
    "forks_count": 22,
    "html_url": "https://github.com/danTaler/detectionString",
    "keywords": [
        "sql injection"
    ],
    "language": null,
    "repo_name": "detectionString",
    "repo_owner": "danTaler",
    "repotime": "2015-12-14, 16:47:36",
    "stargazers_count": 115,
    "watchers_count": 115
}
{
    "commits_count": 1,
    "date_started": "2015-12-11",
    "date_updated": "2015-12-11",
    "description": "Quick python script to automatically load NTLM hashes from Responder logs and fires up Hashcat to crack them ",
    "forks_count": 25,
    "html_url": "https://github.com/sensepost/autoresponder",
    "keywords": [
        "by_owner"
    ],
    "language": "Python",
    "repo_name": "autoresponder",
    "repo_owner": "sensepost",
    "repotime": "2015-12-11, 13:28:31",
    "stargazers_count": 79,
    "watchers_count": 79
}
{
    "commits_count": 1,
    "date_started": "2015-12-03",
    "date_updated": "2015-12-03",
    "description": "    Data Analysis in Insurance Industry -----------------------------------    -----------------------------------  In this Project, We have analyzed an insurance industry data for car Accidents.To analyze the data follow the steps.  **Prerequisites:**  Microsoft Azure account [Click here for trial account][1]  Cloud Berry for Azure [To download click here][2]   **Steps:**          **1.** After creating an account on     Microsoft's Azure, create     an HDInsight cluster.       - Go to Azure portal after creating an account in Azure.    - Click on New   - In Data+Analytics, Select HDInsight   - A new pop-up will appear, Type the cluster name. Select type as &amp;quot;Hadoop&amp;quot;, Operating  System as&amp;quot;Linux&amp;quot;, Select Total node as 2, Put Login name and password, And click on *create*.   - Azure will start deploying a cluster. It will take few minutes to complete the  process.     **2.**  After Creating the cluster, we  will upload data into the cluster. You can get Insurance's Sam...",
    "forks_count": 1,
    "html_url": "https://github.com/nparab/insurance",
    "keywords": [
        "use after free analysis",
        "Microsoft use after free analysis",
        "Microsoft use after free"
    ],
    "language": null,
    "repo_name": "insurance",
    "repo_owner": "nparab",
    "repotime": "2015-12-03, 01:30:17",
    "stargazers_count": 0,
    "watchers_count": 0
}
{
    "commits_count": 6,
    "date_started": "2015-12-02",
    "date_updated": "2015-12-02",
    "description": "Script to exploit the Kodi local file inclusion vulnerability.",
    "forks_count": 1,
    "html_url": "https://github.com/darkerego/kodi-sploit",
    "keywords": [
        "local file inclusion"
    ],
    "language": "Shell",
    "repo_name": "kodi-sploit",
    "repo_owner": "darkerego",
    "repotime": "2015-12-02, 17:02:53",
    "stargazers_count": 1,
    "watchers_count": 1
}
{
    "commits_count": 33,
    "date_started": "2015-12-28",
    "date_updated": "2015-12-28",
    "description": "MovieEye uses django-rest-framework and django to first create an api and then use the api in another app to display movie information. An admin can add,delete movies. Unauthenticated users can read-only",
    "forks_count": 0,
    "html_url": "https://github.com/saket-mishra/MovieEye---IMDB-like-API-integration-with-rest-framework",
    "keywords": [
        "unauthenticated user"
    ],
    "language": "CSS",
    "repo_name": "MovieEye---IMDB-like-API-integration-with-rest-framework",
    "repo_owner": "saket-mishra",
    "repotime": "2015-12-28, 18:02:47",
    "stargazers_count": 0,
    "watchers_count": 0
}
{
    "commits_count": 18,
    "date_started": "2015-03-15",
    "date_updated": "2015-12-14",
    "description": "list of sql-injection and XSS strings",
    "forks_count": 22,
    "html_url": "https://github.com/danTaler/detectionString",
    "keywords": [
        "sql injection"
    ],
    "language": null,
    "repo_name": "detectionString",
    "repo_owner": "danTaler",
    "repotime": "2015-12-14, 16:47:36",
    "stargazers_count": 115,
    "watchers_count": 115
}
{
    "commits_count": 1,
    "date_started": "2015-12-11",
    "date_updated": "2015-12-11",
    "description": "Quick python script to automatically load NTLM hashes from Responder logs and fires up Hashcat to crack them ",
    "forks_count": 25,
    "html_url": "https://github.com/sensepost/autoresponder",
    "keywords": [
        "by_owner"
    ],
    "language": "Python",
    "repo_name": "autoresponder",
    "repo_owner": "sensepost",
    "repotime": "2015-12-11, 13:28:31",
    "stargazers_count": 79,
    "watchers_count": 79
}
{
    "commits_count": 1,
    "date_started": "2015-12-03",
    "date_updated": "2015-12-03",
    "description": "    Data Analysis in Insurance Industry -----------------------------------    -----------------------------------  In this Project, We have analyzed an insurance industry data for car Accidents.To analyze the data follow the steps.  **Prerequisites:**  Microsoft Azure account [Click here for trial account][1]  Cloud Berry for Azure [To download click here][2]   **Steps:**          **1.** After creating an account on     Microsoft's Azure, create     an HDInsight cluster.       - Go to Azure portal after creating an account in Azure.    - Click on New   - In Data+Analytics, Select HDInsight   - A new pop-up will appear, Type the cluster name. Select type as &amp;quot;Hadoop&amp;quot;, Operating  System as&amp;quot;Linux&amp;quot;, Select Total node as 2, Put Login name and password, And click on *create*.   - Azure will start deploying a cluster. It will take few minutes to complete the  process.     **2.**  After Creating the cluster, we  will upload data into the cluster. You can get Insurance's Sam...",
    "forks_count": 1,
    "html_url": "https://github.com/nparab/insurance",
    "keywords": [
        "use after free analysis",
        "Microsoft use after free analysis",
        "Microsoft use after free"
    ],
    "language": null,
    "repo_name": "insurance",
    "repo_owner": "nparab",
    "repotime": "2015-12-03, 01:30:17",
    "stargazers_count": 0,
    "watchers_count": 0
}
{
    "commits_count": 6,
    "date_started": "2015-12-02",
    "date_updated": "2015-12-02",
    "description": "Script to exploit the Kodi local file inclusion vulnerability.",
    "forks_count": 1,
    "html_url": "https://github.com/darkerego/kodi-sploit",
    "keywords": [
        "local file inclusion"
    ],
    "language": "Shell",
    "repo_name": "kodi-sploit",
    "repo_owner": "darkerego",
    "repotime": "2015-12-02, 17:02:53",
    "stargazers_count": 1,
    "watchers_count": 1
}
{
    "commits_count": 33,
    "date_started": "2015-12-28",
    "date_updated": "2015-12-28",
    "description": "MovieEye uses django-rest-framework and django to first create an api and then use the api in another app to display movie information. An admin can add,delete movies. Unauthenticated users can read-only",
    "forks_count": 0,
    "html_url": "https://github.com/saket-mishra/MovieEye---IMDB-like-API-integration-with-rest-framework",
    "keywords": [
        "unauthenticated user"
    ],
    "language": "CSS",
    "repo_name": "MovieEye---IMDB-like-API-integration-with-rest-framework",
    "repo_owner": "saket-mishra",
    "repotime": "2015-12-28, 18:02:47",
    "stargazers_count": 0,
    "watchers_count": 0
}
{
    "commits_count": 18,
    "date_started": "2015-03-15",
    "date_updated": "2015-12-14",
    "description": "list of sql-injection and XSS strings",
    "forks_count": 22,
    "html_url": "https://github.com/danTaler/detectionString",
    "keywords": [
        "sql injection"
    ],
    "language": null,
    "repo_name": "detectionString",
    "repo_owner": "danTaler",
    "repotime": "2015-12-14, 16:47:36",
    "stargazers_count": 115,
    "watchers_count": 115
}
{
    "commits_count": 1,
    "date_started": "2015-12-11",
    "date_updated": "2015-12-11",
    "description": "Quick python script to automatically load NTLM hashes from Responder logs and fires up Hashcat to crack them ",
    "forks_count": 25,
    "html_url": "https://github.com/sensepost/autoresponder",
    "keywords": [
        "by_owner"
    ],
    "language": "Python",
    "repo_name": "autoresponder",
    "repo_owner": "sensepost",
    "repotime": "2015-12-11, 13:28:31",
    "stargazers_count": 79,
    "watchers_count": 79
}
{
    "commits_count": 1,
    "date_started": "2015-12-03",
    "date_updated": "2015-12-03",
    "description": "    Data Analysis in Insurance Industry -----------------------------------    -----------------------------------  In this Project, We have analyzed an insurance industry data for car Accidents.To analyze the data follow the steps.  **Prerequisites:**  Microsoft Azure account [Click here for trial account][1]  Cloud Berry for Azure [To download click here][2]   **Steps:**          **1.** After creating an account on     Microsoft's Azure, create     an HDInsight cluster.       - Go to Azure portal after creating an account in Azure.    - Click on New   - In Data+Analytics, Select HDInsight   - A new pop-up will appear, Type the cluster name. Select type as &amp;quot;Hadoop&amp;quot;, Operating  System as&amp;quot;Linux&amp;quot;, Select Total node as 2, Put Login name and password, And click on *create*.   - Azure will start deploying a cluster. It will take few minutes to complete the  process.     **2.**  After Creating the cluster, we  will upload data into the cluster. You can get Insurance's Sam...",
    "forks_count": 1,
    "html_url": "https://github.com/nparab/insurance",
    "keywords": [
        "use after free analysis",
        "Microsoft use after free analysis",
        "Microsoft use after free"
    ],
    "language": null,
    "repo_name": "insurance",
    "repo_owner": "nparab",
    "repotime": "2015-12-03, 01:30:17",
    "stargazers_count": 0,
    "watchers_count": 0
}
{
    "commits_count": 6,
    "date_started": "2015-12-02",
    "date_updated": "2015-12-02",
    "description": "Script to exploit the Kodi local file inclusion vulnerability.",
    "forks_count": 1,
    "html_url": "https://github.com/darkerego/kodi-sploit",
    "keywords": [
        "local file inclusion"
    ],
    "language": "Shell",
    "repo_name": "kodi-sploit",
    "repo_owner": "darkerego",
    "repotime": "2015-12-02, 17:02:53",
    "stargazers_count": 1,
    "watchers_count": 1
}
{
    "commits_count": 33,
    "date_started": "2015-12-28",
    "date_updated": "2015-12-28",
    "description": "MovieEye uses django-rest-framework and django to first create an api and then use the api in another app to display movie information. An admin can add,delete movies. Unauthenticated users can read-only",
    "forks_count": 0,
    "html_url": "https://github.com/saket-mishra/MovieEye---IMDB-like-API-integration-with-rest-framework",
    "keywords": [
        "unauthenticated user"
    ],
    "language": "CSS",
    "repo_name": "MovieEye---IMDB-like-API-integration-with-rest-framework",
    "repo_owner": "saket-mishra",
    "repotime": "2015-12-28, 18:02:47",
    "stargazers_count": 0,
    "watchers_count": 0
}
{
    "commits_count": 18,
    "date_started": "2015-03-15",
    "date_updated": "2015-12-14",
    "description": "list of sql-injection and XSS strings",
    "forks_count": 22,
    "html_url": "https://github.com/danTaler/detectionString",
    "keywords": [
        "sql injection"
    ],
    "language": null,
    "repo_name": "detectionString",
    "repo_owner": "danTaler",
    "repotime": "2015-12-14, 16:47:36",
    "stargazers_count": 115,
    "watchers_count": 115
}
{
    "commits_count": 1,
    "date_started": "2015-12-11",
    "date_updated": "2015-12-11",
    "description": "Quick python script to automatically load NTLM hashes from Responder logs and fires up Hashcat to crack them ",
    "forks_count": 25,
    "html_url": "https://github.com/sensepost/autoresponder",
    "keywords": [
        "by_owner"
    ],
    "language": "Python",
    "repo_name": "autoresponder",
    "repo_owner": "sensepost",
    "repotime": "2015-12-11, 13:28:31",
    "stargazers_count": 79,
    "watchers_count": 79
}
{
    "commits_count": 1,
    "date_started": "2015-12-03",
    "date_updated": "2015-12-03",
    "description": "    Data Analysis in Insurance Industry -----------------------------------    -----------------------------------  In this Project, We have analyzed an insurance industry data for car Accidents.To analyze the data follow the steps.  **Prerequisites:**  Microsoft Azure account [Click here for trial account][1]  Cloud Berry for Azure [To download click here][2]   **Steps:**          **1.** After creating an account on     Microsoft's Azure, create     an HDInsight cluster.       - Go to Azure portal after creating an account in Azure.    - Click on New   - In Data+Analytics, Select HDInsight   - A new pop-up will appear, Type the cluster name. Select type as &amp;quot;Hadoop&amp;quot;, Operating  System as&amp;quot;Linux&amp;quot;, Select Total node as 2, Put Login name and password, And click on *create*.   - Azure will start deploying a cluster. It will take few minutes to complete the  process.     **2.**  After Creating the cluster, we  will upload data into the cluster. You can get Insurance's Sam...",
    "forks_count": 1,
    "html_url": "https://github.com/nparab/insurance",
    "keywords": [
        "use after free analysis",
        "Microsoft use after free analysis",
        "Microsoft use after free"
    ],
    "language": null,
    "repo_name": "insurance",
    "repo_owner": "nparab",
    "repotime": "2015-12-03, 01:30:17",
    "stargazers_count": 0,
    "watchers_count": 0
}
{
    "commits_count": 6,
    "date_started": "2015-12-02",
    "date_updated": "2015-12-02",
    "description": "Script to exploit the Kodi local file inclusion vulnerability.",
    "forks_count": 1,
    "html_url": "https://github.com/darkerego/kodi-sploit",
    "keywords": [
        "local file inclusion"
    ],
    "language": "Shell",
    "repo_name": "kodi-sploit",
    "repo_owner": "darkerego",
    "repotime": "2015-12-02, 17:02:53",
    "stargazers_count": 1,
    "watchers_count": 1
}
{
    "commits_count": 33,
    "date_started": "2015-12-28",
    "date_updated": "2015-12-28",
    "description": "MovieEye uses django-rest-framework and django to first create an api and then use the api in another app to display movie information. An admin can add,delete movies. Unauthenticated users can read-only",
    "forks_count": 0,
    "html_url": "https://github.com/saket-mishra/MovieEye---IMDB-like-API-integration-with-rest-framework",
    "keywords": [
        "unauthenticated user"
    ],
    "language": "CSS",
    "repo_name": "MovieEye---IMDB-like-API-integration-with-rest-framework",
    "repo_owner": "saket-mishra",
    "repotime": "2015-12-28, 18:02:47",
    "stargazers_count": 0,
    "watchers_count": 0
}
{
    "commits_count": 18,
    "date_started": "2015-03-15",
    "date_updated": "2015-12-14",
    "description": "list of sql-injection and XSS strings",
    "forks_count": 22,
    "html_url": "https://github.com/danTaler/detectionString",
    "keywords": [
        "sql injection"
    ],
    "language": null,
    "repo_name": "detectionString",
    "repo_owner": "danTaler",
    "repotime": "2015-12-14, 16:47:36",
    "stargazers_count": 115,
    "watchers_count": 115
}
{
    "commits_count": 1,
    "date_started": "2015-12-11",
    "date_updated": "2015-12-11",
    "description": "Quick python script to automatically load NTLM hashes from Responder logs and fires up Hashcat to crack them ",
    "forks_count": 25,
    "html_url": "https://github.com/sensepost/autoresponder",
    "keywords": [
        "by_owner"
    ],
    "language": "Python",
    "repo_name": "autoresponder",
    "repo_owner": "sensepost",
    "repotime": "2015-12-11, 13:28:31",
    "stargazers_count": 79,
    "watchers_count": 79
}
{
    "commits_count": 1,
    "date_started": "2015-12-03",
    "date_updated": "2015-12-03",
    "description": "    Data Analysis in Insurance Industry -----------------------------------    -----------------------------------  In this Project, We have analyzed an insurance industry data for car Accidents.To analyze the data follow the steps.  **Prerequisites:**  Microsoft Azure account [Click here for trial account][1]  Cloud Berry for Azure [To download click here][2]   **Steps:**          **1.** After creating an account on     Microsoft's Azure, create     an HDInsight cluster.       - Go to Azure portal after creating an account in Azure.    - Click on New   - In Data+Analytics, Select HDInsight   - A new pop-up will appear, Type the cluster name. Select type as &amp;quot;Hadoop&amp;quot;, Operating  System as&amp;quot;Linux&amp;quot;, Select Total node as 2, Put Login name and password, And click on *create*.   - Azure will start deploying a cluster. It will take few minutes to complete the  process.     **2.**  After Creating the cluster, we  will upload data into the cluster. You can get Insurance's Sam...",
    "forks_count": 1,
    "html_url": "https://github.com/nparab/insurance",
    "keywords": [
        "use after free analysis",
        "Microsoft use after free analysis",
        "Microsoft use after free"
    ],
    "language": null,
    "repo_name": "insurance",
    "repo_owner": "nparab",
    "repotime": "2015-12-03, 01:30:17",
    "stargazers_count": 0,
    "watchers_count": 0
}
{
    "commits_count": 6,
    "date_started": "2015-12-02",
    "date_updated": "2015-12-02",
    "description": "Script to exploit the Kodi local file inclusion vulnerability.",
    "forks_count": 1,
    "html_url": "https://github.com/darkerego/kodi-sploit",
    "keywords": [
        "local file inclusion"
    ],
    "language": "Shell",
    "repo_name": "kodi-sploit",
    "repo_owner": "darkerego",
    "repotime": "2015-12-02, 17:02:53",
    "stargazers_count": 1,
    "watchers_count": 1
}
{
    "commits_count": 33,
    "date_started": "2015-12-28",
    "date_updated": "2015-12-28",
    "description": "MovieEye uses django-rest-framework and django to first create an api and then use the api in another app to display movie information. An admin can add,delete movies. Unauthenticated users can read-only",
    "forks_count": 0,
    "html_url": "https://github.com/saket-mishra/MovieEye---IMDB-like-API-integration-with-rest-framework",
    "keywords": [
        "unauthenticated user"
    ],
    "language": "CSS",
    "repo_name": "MovieEye---IMDB-like-API-integration-with-rest-framework",
    "repo_owner": "saket-mishra",
    "repotime": "2015-12-28, 18:02:47",
    "stargazers_count": 0,
    "watchers_count": 0
}
{
    "commits_count": 18,
    "date_started": "2015-03-15",
    "date_updated": "2015-12-14",
    "description": "list of sql-injection and XSS strings",
    "forks_count": 22,
    "html_url": "https://github.com/danTaler/detectionString",
    "keywords": [
        "sql injection"
    ],
    "language": null,
    "repo_name": "detectionString",
    "repo_owner": "danTaler",
    "repotime": "2015-12-14, 16:47:36",
    "stargazers_count": 115,
    "watchers_count": 115
}
{
    "commits_count": 1,
    "date_started": "2015-12-11",
    "date_updated": "2015-12-11",
    "description": "Quick python script to automatically load NTLM hashes from Responder logs and fires up Hashcat to crack them ",
    "forks_count": 25,
    "html_url": "https://github.com/sensepost/autoresponder",
    "keywords": [
        "by_owner"
    ],
    "language": "Python",
    "repo_name": "autoresponder",
    "repo_owner": "sensepost",
    "repotime": "2015-12-11, 13:28:31",
    "stargazers_count": 79,
    "watchers_count": 79
}
{
    "commits_count": 1,
    "date_started": "2015-12-03",
    "date_updated": "2015-12-03",
    "description": "    Data Analysis in Insurance Industry -----------------------------------    -----------------------------------  In this Project, We have analyzed an insurance industry data for car Accidents.To analyze the data follow the steps.  **Prerequisites:**  Microsoft Azure account [Click here for trial account][1]  Cloud Berry for Azure [To download click here][2]   **Steps:**          **1.** After creating an account on     Microsoft's Azure, create     an HDInsight cluster.       - Go to Azure portal after creating an account in Azure.    - Click on New   - In Data+Analytics, Select HDInsight   - A new pop-up will appear, Type the cluster name. Select type as &amp;quot;Hadoop&amp;quot;, Operating  System as&amp;quot;Linux&amp;quot;, Select Total node as 2, Put Login name and password, And click on *create*.   - Azure will start deploying a cluster. It will take few minutes to complete the  process.     **2.**  After Creating the cluster, we  will upload data into the cluster. You can get Insurance's Sam...",
    "forks_count": 1,
    "html_url": "https://github.com/nparab/insurance",
    "keywords": [
        "use after free analysis",
        "Microsoft use after free analysis",
        "Microsoft use after free"
    ],
    "language": null,
    "repo_name": "insurance",
    "repo_owner": "nparab",
    "repotime": "2015-12-03, 01:30:17",
    "stargazers_count": 0,
    "watchers_count": 0
}
{
    "commits_count": 6,
    "date_started": "2015-12-02",
    "date_updated": "2015-12-02",
    "description": "Script to exploit the Kodi local file inclusion vulnerability.",
    "forks_count": 1,
    "html_url": "https://github.com/darkerego/kodi-sploit",
    "keywords": [
        "local file inclusion"
    ],
    "language": "Shell",
    "repo_name": "kodi-sploit",
    "repo_owner": "darkerego",
    "repotime": "2015-12-02, 17:02:53",
    "stargazers_count": 1,
    "watchers_count": 1
}
{
    "commits_count": 33,
    "date_started": "2015-12-28",
    "date_updated": "2015-12-28",
    "description": "MovieEye uses django-rest-framework and django to first create an api and then use the api in another app to display movie information. An admin can add,delete movies. Unauthenticated users can read-only",
    "forks_count": 0,
    "html_url": "https://github.com/saket-mishra/MovieEye---IMDB-like-API-integration-with-rest-framework",
    "keywords": [
        "unauthenticated user"
    ],
    "language": "CSS",
    "repo_name": "MovieEye---IMDB-like-API-integration-with-rest-framework",
    "repo_owner": "saket-mishra",
    "repotime": "2015-12-28, 18:02:47",
    "stargazers_count": 0,
    "watchers_count": 0
}
{
    "commits_count": 18,
    "date_started": "2015-03-15",
    "date_updated": "2015-12-14",
    "description": "list of sql-injection and XSS strings",
    "forks_count": 22,
    "html_url": "https://github.com/danTaler/detectionString",
    "keywords": [
        "sql injection"
    ],
    "language": null,
    "repo_name": "detectionString",
    "repo_owner": "danTaler",
    "repotime": "2015-12-14, 16:47:36",
    "stargazers_count": 115,
    "watchers_count": 115
}
{
    "commits_count": 1,
    "date_started": "2015-12-11",
    "date_updated": "2015-12-11",
    "description": "Quick python script to automatically load NTLM hashes from Responder logs and fires up Hashcat to crack them ",
    "forks_count": 25,
    "html_url": "https://github.com/sensepost/autoresponder",
    "keywords": [
        "by_owner"
    ],
    "language": "Python",
    "repo_name": "autoresponder",
    "repo_owner": "sensepost",
    "repotime": "2015-12-11, 13:28:31",
    "stargazers_count": 79,
    "watchers_count": 79
}
{
    "commits_count": 1,
    "date_started": "2015-12-03",
    "date_updated": "2015-12-03",
    "description": "    Data Analysis in Insurance Industry -----------------------------------    -----------------------------------  In this Project, We have analyzed an insurance industry data for car Accidents.To analyze the data follow the steps.  **Prerequisites:**  Microsoft Azure account [Click here for trial account][1]  Cloud Berry for Azure [To download click here][2]   **Steps:**          **1.** After creating an account on     Microsoft's Azure, create     an HDInsight cluster.       - Go to Azure portal after creating an account in Azure.    - Click on New   - In Data+Analytics, Select HDInsight   - A new pop-up will appear, Type the cluster name. Select type as &amp;quot;Hadoop&amp;quot;, Operating  System as&amp;quot;Linux&amp;quot;, Select Total node as 2, Put Login name and password, And click on *create*.   - Azure will start deploying a cluster. It will take few minutes to complete the  process.     **2.**  After Creating the cluster, we  will upload data into the cluster. You can get Insurance's Sam...",
    "forks_count": 1,
    "html_url": "https://github.com/nparab/insurance",
    "keywords": [
        "use after free analysis",
        "Microsoft use after free analysis",
        "Microsoft use after free"
    ],
    "language": null,
    "repo_name": "insurance",
    "repo_owner": "nparab",
    "repotime": "2015-12-03, 01:30:17",
    "stargazers_count": 0,
    "watchers_count": 0
}
{
    "commits_count": 6,
    "date_started": "2015-12-02",
    "date_updated": "2015-12-02",
    "description": "Script to exploit the Kodi local file inclusion vulnerability.",
    "forks_count": 1,
    "html_url": "https://github.com/darkerego/kodi-sploit",
    "keywords": [
        "local file inclusion"
    ],
    "language": "Shell",
    "repo_name": "kodi-sploit",
    "repo_owner": "darkerego",
    "repotime": "2015-12-02, 17:02:53",
    "stargazers_count": 1,
    "watchers_count": 1
}
{
    "commits_count": 33,
    "date_started": "2015-12-28",
    "date_updated": "2015-12-28",
    "description": "MovieEye uses django-rest-framework and django to first create an api and then use the api in another app to display movie information. An admin can add,delete movies. Unauthenticated users can read-only",
    "forks_count": 0,
    "html_url": "https://github.com/saket-mishra/MovieEye---IMDB-like-API-integration-with-rest-framework",
    "keywords": [
        "unauthenticated user"
    ],
    "language": "CSS",
    "repo_name": "MovieEye---IMDB-like-API-integration-with-rest-framework",
    "repo_owner": "saket-mishra",
    "repotime": "2015-12-28, 18:02:47",
    "stargazers_count": 0,
    "watchers_count": 0
}
{
    "commits_count": 18,
    "date_started": "2015-03-15",
    "date_updated": "2015-12-14",
    "description": "list of sql-injection and XSS strings",
    "forks_count": 22,
    "html_url": "https://github.com/danTaler/detectionString",
    "keywords": [
        "sql injection"
    ],
    "language": null,
    "repo_name": "detectionString",
    "repo_owner": "danTaler",
    "repotime": "2015-12-14, 16:47:36",
    "stargazers_count": 115,
    "watchers_count": 115
}
{
    "commits_count": 1,
    "date_started": "2015-12-11",
    "date_updated": "2015-12-11",
    "description": "Quick python script to automatically load NTLM hashes from Responder logs and fires up Hashcat to crack them ",
    "forks_count": 25,
    "html_url": "https://github.com/sensepost/autoresponder",
    "keywords": [
        "by_owner"
    ],
    "language": "Python",
    "repo_name": "autoresponder",
    "repo_owner": "sensepost",
    "repotime": "2015-12-11, 13:28:31",
    "stargazers_count": 79,
    "watchers_count": 79
}
{
    "commits_count": 1,
    "date_started": "2015-12-03",
    "date_updated": "2015-12-03",
    "description": "    Data Analysis in Insurance Industry -----------------------------------    -----------------------------------  In this Project, We have analyzed an insurance industry data for car Accidents.To analyze the data follow the steps.  **Prerequisites:**  Microsoft Azure account [Click here for trial account][1]  Cloud Berry for Azure [To download click here][2]   **Steps:**          **1.** After creating an account on     Microsoft's Azure, create     an HDInsight cluster.       - Go to Azure portal after creating an account in Azure.    - Click on New   - In Data+Analytics, Select HDInsight   - A new pop-up will appear, Type the cluster name. Select type as &amp;quot;Hadoop&amp;quot;, Operating  System as&amp;quot;Linux&amp;quot;, Select Total node as 2, Put Login name and password, And click on *create*.   - Azure will start deploying a cluster. It will take few minutes to complete the  process.     **2.**  After Creating the cluster, we  will upload data into the cluster. You can get Insurance's Sam...",
    "forks_count": 1,
    "html_url": "https://github.com/nparab/insurance",
    "keywords": [
        "use after free analysis",
        "Microsoft use after free analysis",
        "Microsoft use after free"
    ],
    "language": null,
    "repo_name": "insurance",
    "repo_owner": "nparab",
    "repotime": "2015-12-03, 01:30:17",
    "stargazers_count": 0,
    "watchers_count": 0
}
{
    "commits_count": 6,
    "date_started": "2015-12-02",
    "date_updated": "2015-12-02",
    "description": "Script to exploit the Kodi local file inclusion vulnerability.",
    "forks_count": 1,
    "html_url": "https://github.com/darkerego/kodi-sploit",
    "keywords": [
        "local file inclusion"
    ],
    "language": "Shell",
    "repo_name": "kodi-sploit",
    "repo_owner": "darkerego",
    "repotime": "2015-12-02, 17:02:53",
    "stargazers_count": 1,
    "watchers_count": 1
}
{
    "commits_count": 33,
    "date_started": "2015-12-28",
    "date_updated": "2015-12-28",
    "description": "MovieEye uses django-rest-framework and django to first create an api and then use the api in another app to display movie information. An admin can add,delete movies. Unauthenticated users can read-only",
    "forks_count": 0,
    "html_url": "https://github.com/saket-mishra/MovieEye---IMDB-like-API-integration-with-rest-framework",
    "keywords": [
        "unauthenticated user"
    ],
    "language": "CSS",
    "repo_name": "MovieEye---IMDB-like-API-integration-with-rest-framework",
    "repo_owner": "saket-mishra",
    "repotime": "2015-12-28, 18:02:47",
    "stargazers_count": 0,
    "watchers_count": 0
}
{
    "commits_count": 18,
    "date_started": "2015-03-15",
    "date_updated": "2015-12-14",
    "description": "list of sql-injection and XSS strings",
    "forks_count": 22,
    "html_url": "https://github.com/danTaler/detectionString",
    "keywords": [
        "sql injection"
    ],
    "language": null,
    "repo_name": "detectionString",
    "repo_owner": "danTaler",
    "repotime": "2015-12-14, 16:47:36",
    "stargazers_count": 115,
    "watchers_count": 115
}
{
    "commits_count": 1,
    "date_started": "2015-12-11",
    "date_updated": "2015-12-11",
    "description": "Quick python script to automatically load NTLM hashes from Responder logs and fires up Hashcat to crack them ",
    "forks_count": 25,
    "html_url": "https://github.com/sensepost/autoresponder",
    "keywords": [
        "by_owner"
    ],
    "language": "Python",
    "repo_name": "autoresponder",
    "repo_owner": "sensepost",
    "repotime": "2015-12-11, 13:28:31",
    "stargazers_count": 79,
    "watchers_count": 79
}
{
    "commits_count": 1,
    "date_started": "2015-12-03",
    "date_updated": "2015-12-03",
    "description": "    Data Analysis in Insurance Industry -----------------------------------    -----------------------------------  In this Project, We have analyzed an insurance industry data for car Accidents.To analyze the data follow the steps.  **Prerequisites:**  Microsoft Azure account [Click here for trial account][1]  Cloud Berry for Azure [To download click here][2]   **Steps:**          **1.** After creating an account on     Microsoft's Azure, create     an HDInsight cluster.       - Go to Azure portal after creating an account in Azure.    - Click on New   - In Data+Analytics, Select HDInsight   - A new pop-up will appear, Type the cluster name. Select type as &amp;quot;Hadoop&amp;quot;, Operating  System as&amp;quot;Linux&amp;quot;, Select Total node as 2, Put Login name and password, And click on *create*.   - Azure will start deploying a cluster. It will take few minutes to complete the  process.     **2.**  After Creating the cluster, we  will upload data into the cluster. You can get Insurance's Sam...",
    "forks_count": 1,
    "html_url": "https://github.com/nparab/insurance",
    "keywords": [
        "use after free analysis",
        "Microsoft use after free analysis",
        "Microsoft use after free"
    ],
    "language": null,
    "repo_name": "insurance",
    "repo_owner": "nparab",
    "repotime": "2015-12-03, 01:30:17",
    "stargazers_count": 0,
    "watchers_count": 0
}
{
    "commits_count": 6,
    "date_started": "2015-12-02",
    "date_updated": "2015-12-02",
    "description": "Script to exploit the Kodi local file inclusion vulnerability.",
    "forks_count": 1,
    "html_url": "https://github.com/darkerego/kodi-sploit",
    "keywords": [
        "local file inclusion"
    ],
    "language": "Shell",
    "repo_name": "kodi-sploit",
    "repo_owner": "darkerego",
    "repotime": "2015-12-02, 17:02:53",
    "stargazers_count": 1,
    "watchers_count": 1
}
{
    "commits_count": 33,
    "date_started": "2015-12-28",
    "date_updated": "2015-12-28",
    "description": "MovieEye uses django-rest-framework and django to first create an api and then use the api in another app to display movie information. An admin can add,delete movies. Unauthenticated users can read-only",
    "forks_count": 0,
    "html_url": "https://github.com/saket-mishra/MovieEye---IMDB-like-API-integration-with-rest-framework",
    "keywords": [
        "unauthenticated user"
    ],
    "language": "CSS",
    "repo_name": "MovieEye---IMDB-like-API-integration-with-rest-framework",
    "repo_owner": "saket-mishra",
    "repotime": "2015-12-28, 18:02:47",
    "stargazers_count": 0,
    "watchers_count": 0
}
{
    "commits_count": 18,
    "date_started": "2015-03-15",
    "date_updated": "2015-12-14",
    "description": "list of sql-injection and XSS strings",
    "forks_count": 22,
    "html_url": "https://github.com/danTaler/detectionString",
    "keywords": [
        "sql injection"
    ],
    "language": null,
    "repo_name": "detectionString",
    "repo_owner": "danTaler",
    "repotime": "2015-12-14, 16:47:36",
    "stargazers_count": 115,
    "watchers_count": 115
}
{
    "commits_count": 1,
    "date_started": "2015-12-11",
    "date_updated": "2015-12-11",
    "description": "Quick python script to automatically load NTLM hashes from Responder logs and fires up Hashcat to crack them ",
    "forks_count": 25,
    "html_url": "https://github.com/sensepost/autoresponder",
    "keywords": [
        "by_owner"
    ],
    "language": "Python",
    "repo_name": "autoresponder",
    "repo_owner": "sensepost",
    "repotime": "2015-12-11, 13:28:31",
    "stargazers_count": 79,
    "watchers_count": 79
}
{
    "commits_count": 1,
    "date_started": "2015-12-03",
    "date_updated": "2015-12-03",
    "description": "    Data Analysis in Insurance Industry -----------------------------------    -----------------------------------  In this Project, We have analyzed an insurance industry data for car Accidents.To analyze the data follow the steps.  **Prerequisites:**  Microsoft Azure account [Click here for trial account][1]  Cloud Berry for Azure [To download click here][2]   **Steps:**          **1.** After creating an account on     Microsoft's Azure, create     an HDInsight cluster.       - Go to Azure portal after creating an account in Azure.    - Click on New   - In Data+Analytics, Select HDInsight   - A new pop-up will appear, Type the cluster name. Select type as &amp;quot;Hadoop&amp;quot;, Operating  System as&amp;quot;Linux&amp;quot;, Select Total node as 2, Put Login name and password, And click on *create*.   - Azure will start deploying a cluster. It will take few minutes to complete the  process.     **2.**  After Creating the cluster, we  will upload data into the cluster. You can get Insurance's Sam...",
    "forks_count": 1,
    "html_url": "https://github.com/nparab/insurance",
    "keywords": [
        "use after free analysis",
        "Microsoft use after free analysis",
        "Microsoft use after free"
    ],
    "language": null,
    "repo_name": "insurance",
    "repo_owner": "nparab",
    "repotime": "2015-12-03, 01:30:17",
    "stargazers_count": 0,
    "watchers_count": 0
}
{
    "commits_count": 6,
    "date_started": "2015-12-02",
    "date_updated": "2015-12-02",
    "description": "Script to exploit the Kodi local file inclusion vulnerability.",
    "forks_count": 1,
    "html_url": "https://github.com/darkerego/kodi-sploit",
    "keywords": [
        "local file inclusion"
    ],
    "language": "Shell",
    "repo_name": "kodi-sploit",
    "repo_owner": "darkerego",
    "repotime": "2015-12-02, 17:02:53",
    "stargazers_count": 1,
    "watchers_count": 1
}
{
    "commits_count": 33,
    "date_started": "2015-12-28",
    "date_updated": "2015-12-28",
    "description": "MovieEye uses django-rest-framework and django to first create an api and then use the api in another app to display movie information. An admin can add,delete movies. Unauthenticated users can read-only",
    "forks_count": 0,
    "html_url": "https://github.com/saket-mishra/MovieEye---IMDB-like-API-integration-with-rest-framework",
    "keywords": [
        "unauthenticated user"
    ],
    "language": "CSS",
    "repo_name": "MovieEye---IMDB-like-API-integration-with-rest-framework",
    "repo_owner": "saket-mishra",
    "repotime": "2015-12-28, 18:02:47",
    "stargazers_count": 0,
    "watchers_count": 0
}
{
    "commits_count": 18,
    "date_started": "2015-03-15",
    "date_updated": "2015-12-14",
    "description": "list of sql-injection and XSS strings",
    "forks_count": 22,
    "html_url": "https://github.com/danTaler/detectionString",
    "keywords": [
        "sql injection"
    ],
    "language": null,
    "repo_name": "detectionString",
    "repo_owner": "danTaler",
    "repotime": "2015-12-14, 16:47:36",
    "stargazers_count": 115,
    "watchers_count": 115
}
{
    "commits_count": 1,
    "date_started": "2015-12-11",
    "date_updated": "2015-12-11",
    "description": "Quick python script to automatically load NTLM hashes from Responder logs and fires up Hashcat to crack them ",
    "forks_count": 25,
    "html_url": "https://github.com/sensepost/autoresponder",
    "keywords": [
        "by_owner"
    ],
    "language": "Python",
    "repo_name": "autoresponder",
    "repo_owner": "sensepost",
    "repotime": "2015-12-11, 13:28:31",
    "stargazers_count": 79,
    "watchers_count": 79
}
{
    "commits_count": 1,
    "date_started": "2015-12-03",
    "date_updated": "2015-12-03",
    "description": "    Data Analysis in Insurance Industry -----------------------------------    -----------------------------------  In this Project, We have analyzed an insurance industry data for car Accidents.To analyze the data follow the steps.  **Prerequisites:**  Microsoft Azure account [Click here for trial account][1]  Cloud Berry for Azure [To download click here][2]   **Steps:**          **1.** After creating an account on     Microsoft's Azure, create     an HDInsight cluster.       - Go to Azure portal after creating an account in Azure.    - Click on New   - In Data+Analytics, Select HDInsight   - A new pop-up will appear, Type the cluster name. Select type as &amp;quot;Hadoop&amp;quot;, Operating  System as&amp;quot;Linux&amp;quot;, Select Total node as 2, Put Login name and password, And click on *create*.   - Azure will start deploying a cluster. It will take few minutes to complete the  process.     **2.**  After Creating the cluster, we  will upload data into the cluster. You can get Insurance's Sam...",
    "forks_count": 1,
    "html_url": "https://github.com/nparab/insurance",
    "keywords": [
        "use after free analysis",
        "Microsoft use after free analysis",
        "Microsoft use after free"
    ],
    "language": null,
    "repo_name": "insurance",
    "repo_owner": "nparab",
    "repotime": "2015-12-03, 01:30:17",
    "stargazers_count": 0,
    "watchers_count": 0
}
{
    "commits_count": 6,
    "date_started": "2015-12-02",
    "date_updated": "2015-12-02",
    "description": "Script to exploit the Kodi local file inclusion vulnerability.",
    "forks_count": 1,
    "html_url": "https://github.com/darkerego/kodi-sploit",
    "keywords": [
        "local file inclusion"
    ],
    "language": "Shell",
    "repo_name": "kodi-sploit",
    "repo_owner": "darkerego",
    "repotime": "2015-12-02, 17:02:53",
    "stargazers_count": 1,
    "watchers_count": 1
}
{
    "commits_count": 33,
    "date_started": "2015-12-28",
    "date_updated": "2015-12-28",
    "description": "MovieEye uses django-rest-framework and django to first create an api and then use the api in another app to display movie information. An admin can add,delete movies. Unauthenticated users can read-only",
    "forks_count": 0,
    "html_url": "https://github.com/saket-mishra/MovieEye---IMDB-like-API-integration-with-rest-framework",
    "keywords": [
        "unauthenticated user"
    ],
    "language": "CSS",
    "repo_name": "MovieEye---IMDB-like-API-integration-with-rest-framework",
    "repo_owner": "saket-mishra",
    "repotime": "2015-12-28, 18:02:47",
    "stargazers_count": 0,
    "watchers_count": 0
}
{
    "commits_count": 18,
    "date_started": "2015-03-15",
    "date_updated": "2015-12-14",
    "description": "list of sql-injection and XSS strings",
    "forks_count": 22,
    "html_url": "https://github.com/danTaler/detectionString",
    "keywords": [
        "sql injection"
    ],
    "language": null,
    "repo_name": "detectionString",
    "repo_owner": "danTaler",
    "repotime": "2015-12-14, 16:47:36",
    "stargazers_count": 115,
    "watchers_count": 115
}
{
    "commits_count": 1,
    "date_started": "2015-12-11",
    "date_updated": "2015-12-11",
    "description": "Quick python script to automatically load NTLM hashes from Responder logs and fires up Hashcat to crack them ",
    "forks_count": 25,
    "html_url": "https://github.com/sensepost/autoresponder",
    "keywords": [
        "by_owner"
    ],
    "language": "Python",
    "repo_name": "autoresponder",
    "repo_owner": "sensepost",
    "repotime": "2015-12-11, 13:28:31",
    "stargazers_count": 79,
    "watchers_count": 79
}
{
    "commits_count": 1,
    "date_started": "2015-12-03",
    "date_updated": "2015-12-03",
    "description": "    Data Analysis in Insurance Industry -----------------------------------    -----------------------------------  In this Project, We have analyzed an insurance industry data for car Accidents.To analyze the data follow the steps.  **Prerequisites:**  Microsoft Azure account [Click here for trial account][1]  Cloud Berry for Azure [To download click here][2]   **Steps:**          **1.** After creating an account on     Microsoft's Azure, create     an HDInsight cluster.       - Go to Azure portal after creating an account in Azure.    - Click on New   - In Data+Analytics, Select HDInsight   - A new pop-up will appear, Type the cluster name. Select type as &amp;quot;Hadoop&amp;quot;, Operating  System as&amp;quot;Linux&amp;quot;, Select Total node as 2, Put Login name and password, And click on *create*.   - Azure will start deploying a cluster. It will take few minutes to complete the  process.     **2.**  After Creating the cluster, we  will upload data into the cluster. You can get Insurance's Sam...",
    "forks_count": 1,
    "html_url": "https://github.com/nparab/insurance",
    "keywords": [
        "use after free analysis",
        "Microsoft use after free analysis",
        "Microsoft use after free"
    ],
    "language": null,
    "repo_name": "insurance",
    "repo_owner": "nparab",
    "repotime": "2015-12-03, 01:30:17",
    "stargazers_count": 0,
    "watchers_count": 0
}
{
    "commits_count": 6,
    "date_started": "2015-12-02",
    "date_updated": "2015-12-02",
    "description": "Script to exploit the Kodi local file inclusion vulnerability.",
    "forks_count": 1,
    "html_url": "https://github.com/darkerego/kodi-sploit",
    "keywords": [
        "local file inclusion"
    ],
    "language": "Shell",
    "repo_name": "kodi-sploit",
    "repo_owner": "darkerego",
    "repotime": "2015-12-02, 17:02:53",
    "stargazers_count": 1,
    "watchers_count": 1
}
